from ... import sql as sql, util as util
from ...sql import sqltypes as sqltypes
from .base import MySQLCompiler as MySQLCompiler, MySQLDialect as MySQLDialect, MySQLExecutionContext as MySQLExecutionContext
from _typeshed import Incomplete

mariadb_cpy_minimum_version: Incomplete

class _MariaDBUUID(sqltypes.UUID[sqltypes._UUID_RETURN]):
    def result_processor(self, dialect, coltype): ...

class MySQLExecutionContext_mariadbconnector(MySQLExecutionContext):
    def create_server_side_cursor(self): ...
    def create_default_cursor(self): ...
    def post_exec(self) -> None: ...
    @property
    def rowcount(self): ...
    def get_lastrowid(self): ...

class MySQLCompiler_mariadbconnector(MySQLCompiler): ...

class MySQLDialect_mariadbconnector(MySQLDialect):
    driver: str
    supports_statement_cache: bool
    supports_unicode_statements: bool
    encoding: str
    convert_unicode: bool
    supports_sane_rowcount: bool
    supports_sane_multi_rowcount: bool
    supports_native_decimal: bool
    default_paramstyle: str
    execution_ctx_cls = MySQLExecutionContext_mariadbconnector
    statement_compiler = MySQLCompiler_mariadbconnector
    supports_server_side_cursors: bool
    colspecs: Incomplete
    paramstyle: str
    def __init__(self, **kwargs) -> None: ...
    @classmethod
    def import_dbapi(cls): ...
    def is_disconnect(self, e, connection, cursor): ...
    def create_connect_args(self, url): ...
    def get_isolation_level_values(self, dbapi_connection): ...
    def set_isolation_level(self, connection, level) -> None: ...
    def do_begin_twophase(self, connection, xid) -> None: ...
    def do_prepare_twophase(self, connection, xid) -> None: ...
    def do_rollback_twophase(self, connection, xid, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def do_commit_twophase(self, connection, xid, is_prepared: bool = ..., recover: bool = ...) -> None: ...
dialect = MySQLDialect_mariadbconnector
