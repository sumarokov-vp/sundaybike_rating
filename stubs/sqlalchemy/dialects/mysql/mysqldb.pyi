from ... import sql as sql, util as util
from .base import MySQLCompiler as MySQLCompiler, MySQLDialect as MySQLDialect, MySQLExecutionContext as MySQLExecutionContext, MySQLIdentifierPreparer as MySQLIdentifierPreparer, TEXT as TEXT
from _typeshed import Incomplete

class MySQLExecutionContext_mysqldb(MySQLExecutionContext):
    @property
    def rowcount(self): ...

class MySQLCompiler_mysqldb(MySQLCompiler): ...

class MySQLDialect_mysqldb(MySQLDialect):
    driver: str
    supports_statement_cache: bool
    supports_unicode_statements: bool
    supports_sane_rowcount: bool
    supports_sane_multi_rowcount: bool
    supports_native_decimal: bool
    default_paramstyle: str
    execution_ctx_cls = MySQLExecutionContext_mysqldb
    statement_compiler = MySQLCompiler_mysqldb
    preparer = MySQLIdentifierPreparer
    def __init__(self, **kwargs) -> None: ...
    def supports_server_side_cursors(self): ...
    @classmethod
    def import_dbapi(cls): ...
    def on_connect(self): ...
    def do_ping(self, dbapi_connection): ...
    def do_executemany(self, cursor, statement, parameters, context: Incomplete | None = ...) -> None: ...
    def create_connect_args(self, url, _translate_args: Incomplete | None = ...): ...
    def get_isolation_level_values(self, dbapi_connection): ...
    def set_isolation_level(self, dbapi_connection, level) -> None: ...
dialect = MySQLDialect_mysqldb
