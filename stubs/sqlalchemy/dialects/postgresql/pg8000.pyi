from . import ranges as ranges
from ... import exc as exc, util as util
from ...engine import processors as processors
from ...sql import sqltypes as sqltypes
from ...sql.elements import quoted_name as quoted_name
from .array import ARRAY as PGARRAY
from .base import ENUM as ENUM, INTERVAL as INTERVAL, PGCompiler as PGCompiler, PGDialect as PGDialect, PGExecutionContext as PGExecutionContext, PGIdentifierPreparer as PGIdentifierPreparer
from .json import JSON as JSON, JSONB as JSONB, JSONPathType as JSONPathType
from .pg_catalog import OIDVECTOR as OIDVECTOR, _SpaceVector
from .types import CITEXT as CITEXT
from _typeshed import Incomplete

class _PGString(sqltypes.String):
    render_bind_cast: bool

class _PGNumeric(sqltypes.Numeric):
    render_bind_cast: bool
    def result_processor(self, dialect, coltype): ...

class _PGFloat(_PGNumeric, sqltypes.Float):
    __visit_name__: str
    render_bind_cast: bool

class _PGNumericNoBind(_PGNumeric):
    def bind_processor(self, dialect) -> None: ...

class _PGJSON(JSON):
    render_bind_cast: bool
    def result_processor(self, dialect, coltype) -> None: ...

class _PGJSONB(JSONB):
    render_bind_cast: bool
    def result_processor(self, dialect, coltype) -> None: ...

class _PGJSONIndexType(sqltypes.JSON.JSONIndexType):
    def get_dbapi_type(self, dbapi) -> None: ...

class _PGJSONIntIndexType(sqltypes.JSON.JSONIntIndexType):
    __visit_name__: str
    render_bind_cast: bool

class _PGJSONStrIndexType(sqltypes.JSON.JSONStrIndexType):
    __visit_name__: str
    render_bind_cast: bool

class _PGJSONPathType(JSONPathType): ...

class _PGEnum(ENUM):
    def get_dbapi_type(self, dbapi): ...

class _PGInterval(INTERVAL):
    render_bind_cast: bool
    def get_dbapi_type(self, dbapi): ...
    @classmethod
    def adapt_emulated_to_native(cls, interval, **kw): ...

class _PGTimeStamp(sqltypes.DateTime):
    render_bind_cast: bool

class _PGDate(sqltypes.Date):
    render_bind_cast: bool

class _PGTime(sqltypes.Time):
    render_bind_cast: bool

class _PGInteger(sqltypes.Integer):
    render_bind_cast: bool

class _PGSmallInteger(sqltypes.SmallInteger):
    render_bind_cast: bool

class _PGNullType(sqltypes.NullType): ...

class _PGBigInteger(sqltypes.BigInteger):
    render_bind_cast: bool

class _PGBoolean(sqltypes.Boolean):
    render_bind_cast: bool

class _PGARRAY(PGARRAY):
    render_bind_cast: bool

class _PGOIDVECTOR(_SpaceVector, OIDVECTOR): ...

class _Pg8000Range(ranges.AbstractRangeImpl):
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...

class _Pg8000MultiRange(ranges.AbstractMultiRangeImpl):
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...

class PGExecutionContext_pg8000(PGExecutionContext):
    def create_server_side_cursor(self): ...
    def pre_exec(self) -> None: ...

class ServerSideCursor:
    server_side: bool
    ident: Incomplete
    cursor: Incomplete
    def __init__(self, cursor, ident) -> None: ...
    @property
    def connection(self): ...
    @property
    def rowcount(self): ...
    @property
    def description(self): ...
    def execute(self, operation, args=..., stream: Incomplete | None = ...): ...
    def executemany(self, operation, param_sets): ...
    def fetchone(self): ...
    def fetchmany(self, num: Incomplete | None = ...): ...
    def fetchall(self): ...
    def close(self) -> None: ...
    def setinputsizes(self, *sizes) -> None: ...
    def setoutputsize(self, size, column: Incomplete | None = ...) -> None: ...

class PGCompiler_pg8000(PGCompiler):
    def visit_mod_binary(self, binary, operator, **kw): ...

class PGIdentifierPreparer_pg8000(PGIdentifierPreparer):
    def __init__(self, *args, **kwargs) -> None: ...

class PGDialect_pg8000(PGDialect):
    driver: str
    supports_statement_cache: bool
    supports_unicode_statements: bool
    supports_unicode_binds: bool
    default_paramstyle: str
    supports_sane_multi_rowcount: bool
    execution_ctx_cls = PGExecutionContext_pg8000
    statement_compiler = PGCompiler_pg8000
    preparer = PGIdentifierPreparer_pg8000
    supports_server_side_cursors: bool
    render_bind_cast: bool
    description_encoding: Incomplete
    colspecs: Incomplete
    client_encoding: Incomplete
    def __init__(self, client_encoding: Incomplete | None = ..., **kwargs) -> None: ...
    @classmethod
    def import_dbapi(cls): ...
    def create_connect_args(self, url): ...
    def is_disconnect(self, e, connection, cursor): ...
    def get_isolation_level_values(self, dbapi_connection): ...
    def set_isolation_level(self, dbapi_connection, level) -> None: ...
    def set_readonly(self, connection, value) -> None: ...
    def get_readonly(self, connection): ...
    def set_deferrable(self, connection, value) -> None: ...
    def get_deferrable(self, connection): ...
    def do_begin_twophase(self, connection, xid) -> None: ...
    def do_prepare_twophase(self, connection, xid) -> None: ...
    def do_rollback_twophase(self, connection, xid, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def do_commit_twophase(self, connection, xid, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def do_recover_twophase(self, connection): ...
    def on_connect(self): ...
dialect = PGDialect_pg8000
