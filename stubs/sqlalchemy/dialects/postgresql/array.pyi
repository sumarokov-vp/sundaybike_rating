from ... import types as sqltypes, util as util
from ...sql import expression as expression, operators as operators
from ...sql._typing import _TypeEngineArgument
from .operators import CONTAINED_BY as CONTAINED_BY, CONTAINS as CONTAINS, OVERLAP as OVERLAP
from _typeshed import Incomplete
from typing import Any, Optional

def All(other, arrexpr, operator=...): ...

class array(expression.ExpressionClauseList[_T]):
    __visit_name__: str
    stringify_dialect: str
    inherit_cache: bool
    type: Incomplete
    def __init__(self, clauses, **kw) -> None: ...
    def self_group(self, against: Incomplete | None = ...): ...

class ARRAY(sqltypes.ARRAY):
    class Comparator(sqltypes.ARRAY.Comparator):
        def contains(self, other, **kwargs): ...
        def contained_by(self, other): ...
        def overlap(self, other): ...
    comparator_factory = Comparator
    item_type: Incomplete
    as_tuple: Incomplete
    dimensions: Incomplete
    zero_indexes: Incomplete
    def __init__(self, item_type: _TypeEngineArgument[Any], as_tuple: bool = ..., dimensions: Optional[int] = ..., zero_indexes: bool = ...) -> None: ...
    @property
    def hashable(self): ...
    @property
    def python_type(self): ...
    def compare_values(self, x, y): ...
    def literal_processor(self, dialect): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
