from . import ranges as ranges
from ... import util as util
from ...util import FastIntFlag as FastIntFlag, parse_user_argument_for_enum as parse_user_argument_for_enum
from ._psycopg_common import _PGDialect_common_psycopg, _PGExecutionContext_common_psycopg
from .base import PGIdentifierPreparer as PGIdentifierPreparer
from .json import JSON as JSON, JSONB as JSONB
from _typeshed import Incomplete

logger: Incomplete

class _PGJSON(JSON):
    def result_processor(self, dialect, coltype) -> None: ...

class _PGJSONB(JSONB):
    def result_processor(self, dialect, coltype) -> None: ...

class _Psycopg2Range(ranges.AbstractRangeImpl):
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...

class _Psycopg2NumericRange(_Psycopg2Range): ...
class _Psycopg2DateRange(_Psycopg2Range): ...
class _Psycopg2DateTimeRange(_Psycopg2Range): ...
class _Psycopg2DateTimeTZRange(_Psycopg2Range): ...

class PGExecutionContext_psycopg2(_PGExecutionContext_common_psycopg):
    def post_exec(self) -> None: ...

class PGIdentifierPreparer_psycopg2(PGIdentifierPreparer): ...

class ExecutemanyMode(FastIntFlag):
    EXECUTEMANY_VALUES: int
    EXECUTEMANY_VALUES_PLUS_BATCH: int

EXECUTEMANY_VALUES: Incomplete
EXECUTEMANY_VALUES_PLUS_BATCH: Incomplete

class PGDialect_psycopg2(_PGDialect_common_psycopg):
    driver: str
    supports_statement_cache: bool
    supports_server_side_cursors: bool
    default_paramstyle: str
    supports_sane_multi_rowcount: bool
    execution_ctx_cls = PGExecutionContext_psycopg2
    preparer = PGIdentifierPreparer_psycopg2
    psycopg2_version: Incomplete
    use_insertmanyvalues_wo_returning: bool
    returns_native_bytes: bool
    colspecs: Incomplete
    executemany_mode: Incomplete
    executemany_batch_page_size: Incomplete
    def __init__(self, executemany_mode: str = ..., executemany_batch_page_size: int = ..., **kwargs) -> None: ...
    def initialize(self, connection) -> None: ...
    @classmethod
    def import_dbapi(cls): ...
    def set_isolation_level(self, dbapi_connection, level) -> None: ...
    def set_readonly(self, connection, value) -> None: ...
    def get_readonly(self, connection): ...
    def set_deferrable(self, connection, value) -> None: ...
    def get_deferrable(self, connection): ...
    def on_connect(self): ...
    def do_executemany(self, cursor, statement, parameters, context: Incomplete | None = ...) -> None: ...
    def do_begin_twophase(self, connection, xid) -> None: ...
    def do_prepare_twophase(self, connection, xid) -> None: ...
    def do_rollback_twophase(self, connection, xid, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def do_commit_twophase(self, connection, xid, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def is_disconnect(self, e, connection, cursor): ...
dialect = PGDialect_psycopg2
