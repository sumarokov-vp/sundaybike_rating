from ... import exc as exc, types as sqltypes, util as util
from ...engine import processors as processors
from .array import ARRAY as PGARRAY
from .base import PGDialect as PGDialect, PGExecutionContext as PGExecutionContext
from .hstore import HSTORE as HSTORE
from .pg_catalog import INT2VECTOR as INT2VECTOR, OIDVECTOR as OIDVECTOR, _SpaceVector
from _typeshed import Incomplete

class _PsycopgNumeric(sqltypes.Numeric):
    def bind_processor(self, dialect) -> None: ...
    def result_processor(self, dialect, coltype): ...

class _PsycopgFloat(_PsycopgNumeric):
    __visit_name__: str

class _PsycopgHStore(HSTORE):
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...

class _PsycopgARRAY(PGARRAY):
    render_bind_cast: bool

class _PsycopgINT2VECTOR(_SpaceVector, INT2VECTOR): ...
class _PsycopgOIDVECTOR(_SpaceVector, OIDVECTOR): ...

class _PGExecutionContext_common_psycopg(PGExecutionContext):
    def create_server_side_cursor(self): ...

class _PGDialect_common_psycopg(PGDialect):
    supports_statement_cache: bool
    supports_server_side_cursors: bool
    default_paramstyle: str
    colspecs: Incomplete
    use_native_hstore: Incomplete
    client_encoding: Incomplete
    def __init__(self, client_encoding: Incomplete | None = ..., use_native_hstore: bool = ..., **kwargs) -> None: ...
    def create_connect_args(self, url): ...
    def get_isolation_level_values(self, dbapi_connection): ...
    def set_deferrable(self, connection, value) -> None: ...
    def get_deferrable(self, connection): ...
    def do_ping(self, dbapi_connection): ...
