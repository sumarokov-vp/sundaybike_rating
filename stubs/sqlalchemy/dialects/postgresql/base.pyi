from . import pg_catalog as pg_catalog
from ... import exc as exc, schema as schema, select as select, sql as sql, util as util
from ...engine import ObjectKind as ObjectKind, ObjectScope as ObjectScope, URL as URL, characteristics as characteristics, default as default, interfaces as interfaces, reflection as reflection
from ...engine.reflection import ReflectionDefaults as ReflectionDefaults
from ...sql import bindparam as bindparam, coercions as coercions, compiler as compiler, elements as elements, expression as expression, roles as roles, sqltypes as sqltypes
from ...sql.compiler import InsertmanyvaluesSentinelOpts as InsertmanyvaluesSentinelOpts
from ...sql.visitors import InternalTraversal as InternalTraversal
from ...types import BIGINT as BIGINT, BOOLEAN as BOOLEAN, CHAR as CHAR, DATE as DATE, DOUBLE_PRECISION as DOUBLE_PRECISION, FLOAT as FLOAT, INTEGER as INTEGER, NUMERIC as NUMERIC, REAL as REAL, SMALLINT as SMALLINT, TEXT as TEXT, VARCHAR as VARCHAR
from ...util.typing import TypedDict as TypedDict
from .ext import aggregate_order_by as aggregate_order_by
from _typeshed import Incomplete
from typing import Any, List, Optional

IDX_USING: Incomplete
RESERVED_WORDS: Incomplete
colspecs: Incomplete
ischema_names: Incomplete

class PGCompiler(compiler.SQLCompiler):
    def visit_to_tsvector_func(self, element, **kw): ...
    def visit_to_tsquery_func(self, element, **kw): ...
    def visit_plainto_tsquery_func(self, element, **kw): ...
    def visit_phraseto_tsquery_func(self, element, **kw): ...
    def visit_websearch_to_tsquery_func(self, element, **kw): ...
    def visit_ts_headline_func(self, element, **kw): ...
    def render_bind_cast(self, type_, dbapi_type, sqltext): ...
    def visit_array(self, element, **kw): ...
    def visit_slice(self, element, **kw): ...
    def visit_bitwise_xor_op_binary(self, binary, operator, **kw): ...
    def visit_json_getitem_op_binary(self, binary, operator, _cast_applied: bool = ..., **kw): ...
    def visit_json_path_getitem_op_binary(self, binary, operator, _cast_applied: bool = ..., **kw): ...
    def visit_getitem_binary(self, binary, operator, **kw): ...
    def visit_aggregate_order_by(self, element, **kw): ...
    def visit_match_op_binary(self, binary, operator, **kw): ...
    def visit_ilike_case_insensitive_operand(self, element, **kw): ...
    def visit_ilike_op_binary(self, binary, operator, **kw): ...
    def visit_not_ilike_op_binary(self, binary, operator, **kw): ...
    def visit_regexp_match_op_binary(self, binary, operator, **kw): ...
    def visit_not_regexp_match_op_binary(self, binary, operator, **kw): ...
    def visit_regexp_replace_op_binary(self, binary, operator, **kw): ...
    def visit_empty_set_expr(self, element_types, **kw): ...
    def render_literal_value(self, value, type_): ...
    def visit_aggregate_strings_func(self, fn, **kw): ...
    def visit_sequence(self, seq, **kw): ...
    def limit_clause(self, select, **kw): ...
    def format_from_hint_text(self, sqltext, table, hint, iscrud): ...
    def get_select_precolumns(self, select, **kw): ...
    def for_update_clause(self, select, **kw): ...
    def visit_substring_func(self, func, **kw): ...
    def visit_on_conflict_do_nothing(self, on_conflict, **kw): ...
    def visit_on_conflict_do_update(self, on_conflict, **kw): ...
    def update_from_clause(self, update_stmt, from_table, extra_froms, from_hints, **kw): ...
    def delete_extra_from_clause(self, delete_stmt, from_table, extra_froms, from_hints, **kw): ...
    def fetch_clause(self, select, **kw): ...

class PGDDLCompiler(compiler.DDLCompiler):
    def get_column_specification(self, column, **kwargs): ...
    def visit_check_constraint(self, constraint, **kw): ...
    def visit_foreign_key_constraint(self, constraint, **kw): ...
    def visit_create_enum_type(self, create, **kw): ...
    def visit_drop_enum_type(self, drop, **kw): ...
    def visit_create_domain_type(self, create, **kw): ...
    def visit_drop_domain_type(self, drop, **kw): ...
    def visit_create_index(self, create, **kw): ...
    def define_unique_constraint_distinct(self, constraint, **kw): ...
    def visit_drop_index(self, drop, **kw): ...
    def visit_exclude_constraint(self, constraint, **kw): ...
    def post_create_table(self, table): ...
    def visit_computed_column(self, generated, **kw): ...
    def visit_create_sequence(self, create, **kw): ...
    def visit_set_constraint_comment(self, create, **kw): ...
    def visit_drop_constraint_comment(self, drop, **kw): ...

class PGTypeCompiler(compiler.GenericTypeCompiler):
    def visit_TSVECTOR(self, type_, **kw): ...
    def visit_TSQUERY(self, type_, **kw): ...
    def visit_INET(self, type_, **kw): ...
    def visit_CIDR(self, type_, **kw): ...
    def visit_CITEXT(self, type_, **kw): ...
    def visit_MACADDR(self, type_, **kw): ...
    def visit_MACADDR8(self, type_, **kw): ...
    def visit_MONEY(self, type_, **kw): ...
    def visit_OID(self, type_, **kw): ...
    def visit_REGCONFIG(self, type_, **kw): ...
    def visit_REGCLASS(self, type_, **kw): ...
    def visit_FLOAT(self, type_, **kw): ...
    def visit_double(self, type_, **kw): ...
    def visit_BIGINT(self, type_, **kw): ...
    def visit_HSTORE(self, type_, **kw): ...
    def visit_JSON(self, type_, **kw): ...
    def visit_JSONB(self, type_, **kw): ...
    def visit_INT4MULTIRANGE(self, type_, **kw): ...
    def visit_INT8MULTIRANGE(self, type_, **kw): ...
    def visit_NUMMULTIRANGE(self, type_, **kw): ...
    def visit_DATEMULTIRANGE(self, type_, **kw): ...
    def visit_TSMULTIRANGE(self, type_, **kw): ...
    def visit_TSTZMULTIRANGE(self, type_, **kw): ...
    def visit_INT4RANGE(self, type_, **kw): ...
    def visit_INT8RANGE(self, type_, **kw): ...
    def visit_NUMRANGE(self, type_, **kw): ...
    def visit_DATERANGE(self, type_, **kw): ...
    def visit_TSRANGE(self, type_, **kw): ...
    def visit_TSTZRANGE(self, type_, **kw): ...
    def visit_json_int_index(self, type_, **kw): ...
    def visit_json_str_index(self, type_, **kw): ...
    def visit_datetime(self, type_, **kw): ...
    def visit_enum(self, type_, **kw): ...
    def visit_ENUM(self, type_, identifier_preparer: Incomplete | None = ..., **kw): ...
    def visit_DOMAIN(self, type_, identifier_preparer: Incomplete | None = ..., **kw): ...
    def visit_TIMESTAMP(self, type_, **kw): ...
    def visit_TIME(self, type_, **kw): ...
    def visit_INTERVAL(self, type_, **kw): ...
    def visit_BIT(self, type_, **kw): ...
    def visit_uuid(self, type_, **kw): ...
    def visit_UUID(self, type_, **kw): ...
    def visit_large_binary(self, type_, **kw): ...
    def visit_BYTEA(self, type_, **kw): ...
    def visit_ARRAY(self, type_, **kw): ...
    def visit_json_path(self, type_, **kw): ...
    def visit_JSONPATH(self, type_, **kw): ...

class PGIdentifierPreparer(compiler.IdentifierPreparer):
    reserved_words = RESERVED_WORDS
    def format_type(self, type_, use_schema: bool = ...): ...

class ReflectedNamedType(TypedDict):
    name: str
    schema: str
    visible: bool

class ReflectedDomainConstraint(TypedDict):
    name: str
    check: str

class ReflectedDomain(ReflectedNamedType):
    type: str
    nullable: bool
    default: Optional[str]
    constraints: List[ReflectedDomainConstraint]

class ReflectedEnum(ReflectedNamedType):
    labels: List[str]

class PGInspector(reflection.Inspector):
    dialect: PGDialect
    def get_table_oid(self, table_name: str, schema: Optional[str] = ...) -> int: ...
    def get_domains(self, schema: Optional[str] = ...) -> List[ReflectedDomain]: ...
    def get_enums(self, schema: Optional[str] = ...) -> List[ReflectedEnum]: ...
    def get_foreign_table_names(self, schema: Optional[str] = ...) -> List[str]: ...
    def has_type(self, type_name: str, schema: Optional[str] = ..., **kw: Any) -> bool: ...

class PGExecutionContext(default.DefaultExecutionContext):
    def fire_sequence(self, seq, type_): ...
    def get_insert_default(self, column): ...

class PGReadOnlyConnectionCharacteristic(characteristics.ConnectionCharacteristic):
    transactional: bool
    def reset_characteristic(self, dialect, dbapi_conn) -> None: ...
    def set_characteristic(self, dialect, dbapi_conn, value) -> None: ...
    def get_characteristic(self, dialect, dbapi_conn): ...

class PGDeferrableConnectionCharacteristic(characteristics.ConnectionCharacteristic):
    transactional: bool
    def reset_characteristic(self, dialect, dbapi_conn) -> None: ...
    def set_characteristic(self, dialect, dbapi_conn, value) -> None: ...
    def get_characteristic(self, dialect, dbapi_conn): ...

class PGDialect(default.DefaultDialect):
    name: str
    supports_statement_cache: bool
    supports_alter: bool
    max_identifier_length: int
    supports_sane_rowcount: bool
    bind_typing: Incomplete
    supports_native_enum: bool
    supports_native_boolean: bool
    supports_native_uuid: bool
    supports_smallserial: bool
    supports_sequences: bool
    sequences_optional: bool
    preexecute_autoincrement_sequences: bool
    postfetch_lastrowid: bool
    use_insertmanyvalues: bool
    returns_native_bytes: bool
    insertmanyvalues_implicit_sentinel: Incomplete
    supports_comments: bool
    supports_constraint_comments: bool
    supports_default_values: bool
    supports_default_metavalue: bool
    supports_empty_insert: bool
    supports_multivalues_insert: bool
    supports_identity_columns: bool
    default_paramstyle: str
    ischema_names = ischema_names
    colspecs = colspecs
    statement_compiler = PGCompiler
    ddl_compiler = PGDDLCompiler
    type_compiler_cls = PGTypeCompiler
    preparer = PGIdentifierPreparer
    execution_ctx_cls = PGExecutionContext
    inspector = PGInspector
    update_returning: bool
    delete_returning: bool
    insert_returning: bool
    update_returning_multifrom: bool
    delete_returning_multifrom: bool
    connection_characteristics: Incomplete
    construct_arguments: Incomplete
    reflection_options: Incomplete
    def __init__(self, native_inet_types: Incomplete | None = ..., json_serializer: Incomplete | None = ..., json_deserializer: Incomplete | None = ..., **kwargs) -> None: ...
    def initialize(self, connection) -> None: ...
    def get_isolation_level_values(self, dbapi_conn): ...
    def set_isolation_level(self, dbapi_connection, level) -> None: ...
    def get_isolation_level(self, dbapi_connection): ...
    def set_readonly(self, connection, value) -> None: ...
    def get_readonly(self, connection) -> None: ...
    def set_deferrable(self, connection, value) -> None: ...
    def get_deferrable(self, connection) -> None: ...
    def do_begin_twophase(self, connection, xid) -> None: ...
    def do_prepare_twophase(self, connection, xid) -> None: ...
    def do_rollback_twophase(self, connection, xid, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def do_commit_twophase(self, connection, xid, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def do_recover_twophase(self, connection): ...
    def has_schema(self, connection, schema, **kw): ...
    def has_table(self, connection, table_name, schema: Incomplete | None = ..., **kw): ...
    def has_sequence(self, connection, sequence_name, schema: Incomplete | None = ..., **kw): ...
    def has_type(self, connection, type_name, schema: Incomplete | None = ..., **kw): ...
    def get_table_oid(self, connection, table_name, schema: Incomplete | None = ..., **kw): ...
    def get_schema_names(self, connection, **kw): ...
    def get_table_names(self, connection, schema: Incomplete | None = ..., **kw): ...
    def get_temp_table_names(self, connection, **kw): ...
    def get_view_names(self, connection, schema: Incomplete | None = ..., **kw): ...
    def get_materialized_view_names(self, connection, schema: Incomplete | None = ..., **kw): ...
    def get_temp_view_names(self, connection, schema: Incomplete | None = ..., **kw): ...
    def get_sequence_names(self, connection, schema: Incomplete | None = ..., **kw): ...
    def get_view_definition(self, connection, view_name, schema: Incomplete | None = ..., **kw): ...
    def get_columns(self, connection, table_name, schema: Incomplete | None = ..., **kw): ...
    def get_multi_columns(self, connection, schema, filter_names, scope, kind, **kw): ...
    def get_pk_constraint(self, connection, table_name, schema: Incomplete | None = ..., **kw): ...
    def get_multi_pk_constraint(self, connection, schema, filter_names, scope, kind, **kw): ...
    def get_foreign_keys(self, connection, table_name, schema: Incomplete | None = ..., postgresql_ignore_search_path: bool = ..., **kw): ...
    def get_multi_foreign_keys(self, connection, schema, filter_names, scope, kind, postgresql_ignore_search_path: bool = ..., **kw): ...
    def get_indexes(self, connection, table_name, schema: Incomplete | None = ..., **kw): ...
    def get_multi_indexes(self, connection, schema, filter_names, scope, kind, **kw): ...
    def get_unique_constraints(self, connection, table_name, schema: Incomplete | None = ..., **kw): ...
    def get_multi_unique_constraints(self, connection, schema, filter_names, scope, kind, **kw): ...
    def get_table_comment(self, connection, table_name, schema: Incomplete | None = ..., **kw): ...
    def get_multi_table_comment(self, connection, schema, filter_names, scope, kind, **kw): ...
    def get_check_constraints(self, connection, table_name, schema: Incomplete | None = ..., **kw): ...
    def get_multi_check_constraints(self, connection, schema, filter_names, scope, kind, **kw): ...
