from ... import pool as pool, util as util
from ...engine import AdaptedConnection as AdaptedConnection
from ...util.concurrency import await_fallback as await_fallback, await_only as await_only
from .base import SQLiteExecutionContext as SQLiteExecutionContext
from .pysqlite import SQLiteDialect_pysqlite as SQLiteDialect_pysqlite
from _typeshed import Incomplete

class AsyncAdapt_aiosqlite_cursor:
    server_side: bool
    await_: Incomplete
    arraysize: int
    rowcount: int
    description: Incomplete
    def __init__(self, adapt_connection) -> None: ...
    def close(self) -> None: ...
    lastrowid: int
    def execute(self, operation, parameters: Incomplete | None = ...) -> None: ...
    def executemany(self, operation, seq_of_parameters) -> None: ...
    def setinputsizes(self, *inputsizes) -> None: ...
    def __iter__(self): ...
    def fetchone(self): ...
    def fetchmany(self, size: Incomplete | None = ...): ...
    def fetchall(self): ...

class AsyncAdapt_aiosqlite_ss_cursor(AsyncAdapt_aiosqlite_cursor):
    server_side: bool
    def __init__(self, *arg, **kw) -> None: ...
    def close(self) -> None: ...
    def fetchone(self): ...
    def fetchmany(self, size: Incomplete | None = ...): ...
    def fetchall(self): ...

class AsyncAdapt_aiosqlite_connection(AdaptedConnection):
    await_: Incomplete
    dbapi: Incomplete
    def __init__(self, dbapi, connection) -> None: ...
    @property
    def isolation_level(self): ...
    @isolation_level.setter
    def isolation_level(self, value): ...
    def create_function(self, *args, **kw) -> None: ...
    def cursor(self, server_side: bool = ...): ...
    def execute(self, *args, **kw): ...
    def rollback(self) -> None: ...
    def commit(self) -> None: ...
    def close(self) -> None: ...

class AsyncAdaptFallback_aiosqlite_connection(AsyncAdapt_aiosqlite_connection):
    await_: Incomplete

class AsyncAdapt_aiosqlite_dbapi:
    aiosqlite: Incomplete
    sqlite: Incomplete
    paramstyle: str
    def __init__(self, aiosqlite, sqlite) -> None: ...
    def connect(self, *arg, **kw): ...

class SQLiteExecutionContext_aiosqlite(SQLiteExecutionContext):
    def create_server_side_cursor(self): ...

class SQLiteDialect_aiosqlite(SQLiteDialect_pysqlite):
    driver: str
    supports_statement_cache: bool
    is_async: bool
    supports_server_side_cursors: bool
    execution_ctx_cls = SQLiteExecutionContext_aiosqlite
    @classmethod
    def import_dbapi(cls): ...
    @classmethod
    def get_pool_class(cls, url): ...
    def is_disconnect(self, e, connection, cursor): ...
    def get_driver_connection(self, connection): ...
dialect = SQLiteDialect_aiosqlite
