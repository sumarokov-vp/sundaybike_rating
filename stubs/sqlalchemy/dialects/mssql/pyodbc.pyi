from ... import exc as exc, types as sqltypes, util as util
from ...connectors.pyodbc import PyODBCConnector as PyODBCConnector
from .base import BINARY as BINARY, DATETIMEOFFSET as DATETIMEOFFSET, MSDialect as MSDialect, MSExecutionContext as MSExecutionContext, VARBINARY as VARBINARY, _MSDateTime, _MSUnicode, _MSUnicodeText
from .json import JSON as _MSJson, JSONIndexType as _MSJsonIndexType, JSONPathType as _MSJsonPathType
from _typeshed import Incomplete

class _ms_numeric_pyodbc:
    def bind_processor(self, dialect): ...

class _MSNumeric_pyodbc(_ms_numeric_pyodbc, sqltypes.Numeric): ...
class _MSFloat_pyodbc(_ms_numeric_pyodbc, sqltypes.Float): ...

class _ms_binary_pyodbc:
    def bind_processor(self, dialect): ...

class _ODBCDateTimeBindProcessor:
    has_tz: bool
    def bind_processor(self, dialect): ...

class _ODBCDateTime(_ODBCDateTimeBindProcessor, _MSDateTime): ...

class _ODBCDATETIMEOFFSET(_ODBCDateTimeBindProcessor, DATETIMEOFFSET):
    has_tz: bool

class _VARBINARY_pyodbc(_ms_binary_pyodbc, VARBINARY): ...
class _BINARY_pyodbc(_ms_binary_pyodbc, BINARY): ...

class _String_pyodbc(sqltypes.String):
    def get_dbapi_type(self, dbapi): ...

class _Unicode_pyodbc(_MSUnicode):
    def get_dbapi_type(self, dbapi): ...

class _UnicodeText_pyodbc(_MSUnicodeText):
    def get_dbapi_type(self, dbapi): ...

class _JSON_pyodbc(_MSJson):
    def get_dbapi_type(self, dbapi): ...

class _JSONIndexType_pyodbc(_MSJsonIndexType):
    def get_dbapi_type(self, dbapi): ...

class _JSONPathType_pyodbc(_MSJsonPathType):
    def get_dbapi_type(self, dbapi): ...

class MSExecutionContext_pyodbc(MSExecutionContext):
    def pre_exec(self) -> None: ...
    cursor_fetch_strategy: Incomplete
    def post_exec(self) -> None: ...

class MSDialect_pyodbc(PyODBCConnector, MSDialect):
    supports_statement_cache: bool
    supports_sane_rowcount_returning: bool
    execution_ctx_cls = MSExecutionContext_pyodbc
    colspecs: Incomplete
    use_scope_identity: Incomplete
    fast_executemany: Incomplete
    use_insertmanyvalues_wo_returning: bool
    def __init__(self, fast_executemany: bool = ..., use_setinputsizes: bool = ..., **params) -> None: ...
    def on_connect(self): ...
    def do_executemany(self, cursor, statement, parameters, context: Incomplete | None = ...) -> None: ...
    def is_disconnect(self, e, connection, cursor): ...
dialect = MSDialect_pyodbc
