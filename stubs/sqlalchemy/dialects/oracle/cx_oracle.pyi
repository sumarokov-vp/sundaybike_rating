from . import base as oracle
from ... import exc as exc, util as util
from ...engine import interfaces as interfaces, processors as processors
from ...sql import sqltypes as sqltypes
from ...sql._typing import is_sql_compiler as is_sql_compiler
from .base import OracleCompiler as OracleCompiler, OracleDialect as OracleDialect, OracleExecutionContext as OracleExecutionContext
from .types import _OracleDateLiteralRender
from _typeshed import Incomplete

class _OracleInteger(sqltypes.Integer):
    def get_dbapi_type(self, dbapi): ...

class _OracleNumeric(sqltypes.Numeric):
    is_number: bool
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype) -> None: ...

class _OracleUUID(sqltypes.Uuid):
    def get_dbapi_type(self, dbapi): ...

class _OracleBinaryFloat(_OracleNumeric):
    def get_dbapi_type(self, dbapi): ...

class _OracleBINARY_FLOAT(_OracleBinaryFloat, oracle.BINARY_FLOAT): ...
class _OracleBINARY_DOUBLE(_OracleBinaryFloat, oracle.BINARY_DOUBLE): ...

class _OracleNUMBER(_OracleNumeric):
    is_number: bool

class _CXOracleDate(oracle._OracleDate):
    def bind_processor(self, dialect) -> None: ...
    def result_processor(self, dialect, coltype): ...

class _CXOracleTIMESTAMP(_OracleDateLiteralRender, sqltypes.TIMESTAMP):
    def literal_processor(self, dialect): ...

class _LOBDataType: ...

class _OracleChar(sqltypes.CHAR):
    def get_dbapi_type(self, dbapi): ...

class _OracleNChar(sqltypes.NCHAR):
    def get_dbapi_type(self, dbapi): ...

class _OracleUnicodeStringNCHAR(oracle.NVARCHAR2):
    def get_dbapi_type(self, dbapi): ...

class _OracleUnicodeStringCHAR(sqltypes.Unicode):
    def get_dbapi_type(self, dbapi): ...

class _OracleUnicodeTextNCLOB(_LOBDataType, oracle.NCLOB):
    def get_dbapi_type(self, dbapi): ...

class _OracleUnicodeTextCLOB(_LOBDataType, sqltypes.UnicodeText):
    def get_dbapi_type(self, dbapi): ...

class _OracleText(_LOBDataType, sqltypes.Text):
    def get_dbapi_type(self, dbapi): ...

class _OracleLong(_LOBDataType, oracle.LONG):
    def get_dbapi_type(self, dbapi): ...

class _OracleString(sqltypes.String): ...

class _OracleEnum(sqltypes.Enum):
    def bind_processor(self, dialect): ...

class _OracleBinary(_LOBDataType, sqltypes.LargeBinary):
    def get_dbapi_type(self, dbapi): ...
    def bind_processor(self, dialect) -> None: ...
    def result_processor(self, dialect, coltype): ...

class _OracleInterval(oracle.INTERVAL):
    def get_dbapi_type(self, dbapi): ...

class _OracleRaw(oracle.RAW): ...

class _OracleRowid(oracle.ROWID):
    def get_dbapi_type(self, dbapi): ...

class OracleCompiler_cx_oracle(OracleCompiler):
    bindname_escape_characters: Incomplete
    def bindparam_string(self, name, **kw): ...

class OracleExecutionContext_cx_oracle(OracleExecutionContext):
    out_parameters: Incomplete
    def pre_exec(self) -> None: ...
    cursor_fetch_strategy: Incomplete
    def post_exec(self) -> None: ...
    def create_cursor(self): ...
    def fetchall_for_returning(self, cursor, *, _internal: bool = ...): ...
    def get_out_parameter_values(self, out_param_names): ...

class OracleDialect_cx_oracle(OracleDialect):
    supports_statement_cache: bool
    execution_ctx_cls = OracleExecutionContext_cx_oracle
    statement_compiler = OracleCompiler_cx_oracle
    supports_sane_rowcount: bool
    supports_sane_multi_rowcount: bool
    insert_executemany_returning: bool
    insert_executemany_returning_sort_by_parameter_order: bool
    update_executemany_returning: bool
    delete_executemany_returning: bool
    bind_typing: Incomplete
    driver: str
    colspecs: Incomplete
    execute_sequence_format = list
    arraysize: Incomplete
    encoding_errors: Incomplete
    auto_convert_lobs: Incomplete
    coerce_to_decimal: Incomplete
    include_set_input_sizes: Incomplete
    def __init__(self, auto_convert_lobs: bool = ..., coerce_to_decimal: bool = ..., arraysize: int = ..., encoding_errors: Incomplete | None = ..., threaded: Incomplete | None = ..., **kwargs) -> None: ...
    @classmethod
    def import_dbapi(cls): ...
    def initialize(self, connection) -> None: ...
    def get_isolation_level(self, dbapi_connection): ...
    def get_isolation_level_values(self, dbapi_connection): ...
    def set_isolation_level(self, dbapi_connection, level) -> None: ...
    def on_connect(self): ...
    def create_connect_args(self, url): ...
    def is_disconnect(self, e, connection, cursor): ...
    def create_xid(self): ...
    def do_executemany(self, cursor, statement, parameters, context: Incomplete | None = ...) -> None: ...
    def do_begin_twophase(self, connection, xid) -> None: ...
    def do_prepare_twophase(self, connection, xid) -> None: ...
    def do_rollback_twophase(self, connection, xid, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def do_commit_twophase(self, connection, xid, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def do_set_input_sizes(self, cursor, list_of_tuples, context) -> None: ...
    def do_recover_twophase(self, connection) -> None: ...
dialect = OracleDialect_cx_oracle
