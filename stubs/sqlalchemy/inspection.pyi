from . import exc as exc
from .util.typing import Literal as Literal, Protocol as Protocol
from typing import Any, Generic, Optional, Type, overload

class Inspectable(Generic[_T]): ...
class _InspectableTypeProtocol(Protocol[_TCov]): ...
class _InspectableProtocol(Protocol[_TCov]): ...

@overload
def inspect(subject: Type[_InspectableTypeProtocol[_IN]], raiseerr: bool = ...) -> _IN: ...
@overload
def inspect(subject: _InspectableProtocol[_IN], raiseerr: bool = ...) -> _IN: ...
@overload
def inspect(subject: Inspectable[_IN], raiseerr: bool = ...) -> _IN: ...
@overload
def inspect(subject: Any, raiseerr: Literal[False] = ...) -> Optional[Any]: ...
@overload
def inspect(subject: Any, raiseerr: bool = ...) -> Any: ...
