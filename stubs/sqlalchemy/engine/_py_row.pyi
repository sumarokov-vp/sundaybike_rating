from .result import ResultMetaData as ResultMetaData, _KeyType, _ProcessorsType, _RawRowType, _TupleGetterType
from typing import Any, Callable, Dict, Iterator, Mapping, Optional, Tuple

MD_INDEX: int

class BaseRow:
    def __init__(self, parent: ResultMetaData, processors: Optional[_ProcessorsType], key_to_index: Mapping[_KeyType, int], data: _RawRowType) -> None: ...
    def __reduce__(self) -> Tuple[Callable[..., BaseRow], Tuple[Any, ...]]: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __getattr__(self, name: str) -> Any: ...

def rowproxy_reconstructor(cls, state: Dict[str, Any]) -> BaseRow: ...
def tuplegetter(*indexes: int) -> _TupleGetterType: ...
