from . import characteristics as characteristics, interfaces as interfaces
from .. import event as event, exc as exc, pool as pool, util as util
from ..pool import Pool as Pool, PoolProxiedConnection as PoolProxiedConnection
from ..sql import Executable as Executable, compiler as compiler, dml as dml, expression as expression, type_api as type_api
from ..sql._typing import is_tuple_type as is_tuple_type
from ..sql.base import _NoArg
from ..sql.compiler import Compiled as Compiled, DDLCompiler as DDLCompiler, InsertmanyvaluesSentinelOpts as InsertmanyvaluesSentinelOpts, Linting as Linting, ResultColumnsEntry as ResultColumnsEntry, SQLCompiler as SQLCompiler
from ..sql.dml import DMLState as DMLState, UpdateBase as UpdateBase
from ..sql.elements import BindParameter as BindParameter, quoted_name as quoted_name
from ..sql.schema import Column as Column
from ..sql.type_api import TypeEngine as TypeEngine
from ..util.typing import Final as Final, Literal as Literal
from .base import Connection as Connection, Engine as Engine
from .cursor import ResultFetchStrategy as ResultFetchStrategy
from .interfaces import CacheStats as CacheStats, DBAPIConnection as DBAPIConnection, DBAPICursor as DBAPICursor, Dialect as Dialect, ExecuteStyle as ExecuteStyle, ExecutionContext as ExecutionContext, IsolationLevel as IsolationLevel, _CoreSingleExecuteParams, _DBAPIMultiExecuteParams, _ExecuteOptions, _MutableCoreSingleExecuteParams, _ParamStyle
from .reflection import ObjectKind as ObjectKind, ObjectScope as ObjectScope
from .row import Row as Row
from .url import URL as URL
from _typeshed import Incomplete
from types import ModuleType
from typing import Any, List, Mapping, MutableMapping, Optional, Sequence, Set, Tuple, Type, Union

SERVER_SIDE_CURSOR_RE: Incomplete
CACHE_HIT: Incomplete
CACHE_MISS: Incomplete
CACHING_DISABLED: Incomplete
NO_CACHE_KEY: Incomplete
NO_DIALECT_SUPPORT: Incomplete

class DefaultDialect(Dialect):
    statement_compiler = compiler.SQLCompiler
    ddl_compiler = compiler.DDLCompiler
    type_compiler_cls = compiler.GenericTypeCompiler
    preparer = compiler.IdentifierPreparer
    supports_alter: bool
    supports_comments: bool
    supports_constraint_comments: bool
    inline_comments: bool
    supports_statement_cache: bool
    div_is_floordiv: bool
    bind_typing: Incomplete
    include_set_input_sizes: Optional[Set[Any]]
    exclude_set_input_sizes: Optional[Set[Any]]
    default_sequence_base: int
    execute_sequence_format = tuple
    supports_schemas: bool
    supports_views: bool
    supports_sequences: bool
    sequences_optional: bool
    preexecute_autoincrement_sequences: bool
    supports_identity_columns: bool
    postfetch_lastrowid: bool
    favor_returning_over_lastrowid: bool
    insert_null_pk_still_autoincrements: bool
    update_returning: bool
    delete_returning: bool
    update_returning_multifrom: bool
    delete_returning_multifrom: bool
    insert_returning: bool
    cte_follows_insert: bool
    supports_native_enum: bool
    supports_native_boolean: bool
    supports_native_uuid: bool
    returns_native_bytes: bool
    non_native_boolean_check_constraint: bool
    supports_simple_order_by_label: bool
    tuple_in_values: bool
    connection_characteristics: Incomplete
    engine_config_types: Mapping[str, Any]
    supports_native_decimal: bool
    name: str
    max_identifier_length: int
    isolation_level: Optional[str]
    max_index_name_length: Optional[int]
    max_constraint_name_length: Optional[int]
    supports_sane_rowcount: bool
    supports_sane_multi_rowcount: bool
    colspecs: MutableMapping[Type[TypeEngine[Any]], Type[TypeEngine[Any]]]
    default_paramstyle: str
    supports_default_values: bool
    supports_default_metavalue: bool
    default_metavalue_token: str
    supports_empty_insert: bool
    supports_multivalues_insert: bool
    use_insertmanyvalues: bool
    use_insertmanyvalues_wo_returning: bool
    insertmanyvalues_implicit_sentinel: InsertmanyvaluesSentinelOpts
    insertmanyvalues_page_size: int
    insertmanyvalues_max_parameters: int
    supports_is_distinct_from: bool
    supports_server_side_cursors: bool
    server_side_cursors: bool
    supports_for_update_of: bool
    server_version_info: Incomplete
    default_schema_name: Optional[str]
    requires_name_normalize: bool
    is_async: bool
    has_terminate: bool
    positional: bool
    dbapi: Incomplete
    paramstyle: Incomplete
    identifier_preparer: Incomplete
    type_compiler_instance: Incomplete
    label_length: Incomplete
    compiler_linting: Incomplete
    def __init__(self, paramstyle: Optional[_ParamStyle] = ..., isolation_level: Optional[IsolationLevel] = ..., dbapi: Optional[ModuleType] = ..., implicit_returning: Literal[True] = ..., supports_native_boolean: Optional[bool] = ..., max_identifier_length: Optional[int] = ..., label_length: Optional[int] = ..., insertmanyvalues_page_size: Union[_NoArg, int] = ..., use_insertmanyvalues: Optional[bool] = ..., compiler_linting: Linting = ..., server_side_cursors: bool = ..., **kwargs: Any) -> None: ...
    @property
    def full_returning(self): ...
    def insert_executemany_returning(self): ...
    def insert_executemany_returning_sort_by_parameter_order(self): ...
    update_executemany_returning: bool
    delete_executemany_returning: bool
    def loaded_dbapi(self) -> ModuleType: ...
    @property
    def dialect_description(self): ...
    @property
    def supports_sane_rowcount_returning(self): ...
    @classmethod
    def get_pool_class(cls, url: URL) -> Type[Pool]: ...
    def get_dialect_pool_class(self, url: URL) -> Type[Pool]: ...
    @classmethod
    def load_provisioning(cls) -> None: ...
    default_isolation_level: Incomplete
    def initialize(self, connection) -> None: ...
    def on_connect(self) -> None: ...
    def get_default_isolation_level(self, dbapi_conn): ...
    def type_descriptor(self, typeobj): ...
    def has_index(self, connection, table_name, index_name, schema: Incomplete | None = ..., **kw): ...
    def has_schema(self, connection: Connection, schema_name: str, **kw: Any) -> bool: ...
    def validate_identifier(self, ident) -> None: ...
    def connect(self, *cargs, **cparams): ...
    def create_connect_args(self, url): ...
    def set_engine_execution_options(self, engine: Engine, opts: Mapping[str, Any]) -> None: ...
    def set_connection_execution_options(self, connection: Connection, opts: Mapping[str, Any]) -> None: ...
    def do_begin(self, dbapi_connection) -> None: ...
    def do_rollback(self, dbapi_connection) -> None: ...
    def do_commit(self, dbapi_connection) -> None: ...
    def do_terminate(self, dbapi_connection) -> None: ...
    def do_close(self, dbapi_connection) -> None: ...
    def do_ping(self, dbapi_connection: DBAPIConnection) -> bool: ...
    def create_xid(self): ...
    def do_savepoint(self, connection, name) -> None: ...
    def do_rollback_to_savepoint(self, connection, name) -> None: ...
    def do_release_savepoint(self, connection, name) -> None: ...
    def do_executemany(self, cursor, statement, parameters, context: Incomplete | None = ...) -> None: ...
    def do_execute(self, cursor, statement, parameters, context: Incomplete | None = ...) -> None: ...
    def do_execute_no_params(self, cursor, statement, context: Incomplete | None = ...) -> None: ...
    def is_disconnect(self, e, connection, cursor): ...
    def reset_isolation_level(self, dbapi_conn) -> None: ...
    def normalize_name(self, name): ...
    def denormalize_name(self, name): ...
    def get_driver_connection(self, connection): ...
    def get_multi_table_options(self, connection, **kw): ...
    def get_multi_columns(self, connection, **kw): ...
    def get_multi_pk_constraint(self, connection, **kw): ...
    def get_multi_foreign_keys(self, connection, **kw): ...
    def get_multi_indexes(self, connection, **kw): ...
    def get_multi_unique_constraints(self, connection, **kw): ...
    def get_multi_check_constraints(self, connection, **kw): ...
    def get_multi_table_comment(self, connection, **kw): ...

class StrCompileDialect(DefaultDialect):
    statement_compiler = compiler.StrSQLCompiler
    ddl_compiler = compiler.DDLCompiler
    type_compiler_cls = compiler.StrSQLTypeCompiler
    preparer = compiler.IdentifierPreparer
    insert_returning: bool
    update_returning: bool
    delete_returning: bool
    supports_statement_cache: bool
    supports_identity_columns: bool
    supports_sequences: bool
    sequences_optional: bool
    preexecute_autoincrement_sequences: bool
    supports_native_boolean: bool
    supports_multivalues_insert: bool
    supports_simple_order_by_label: bool

class DefaultExecutionContext(ExecutionContext):
    isinsert: bool
    isupdate: bool
    isdelete: bool
    is_crud: bool
    is_text: bool
    isddl: bool
    execute_style: ExecuteStyle
    compiled: Optional[Compiled]
    result_column_struct: Optional[Tuple[List[ResultColumnsEntry], bool, bool, bool, bool]]
    returned_default_rows: Optional[Sequence[Row[Any]]]
    execution_options: _ExecuteOptions
    cursor_fetch_strategy: Incomplete
    invoked_statement: Optional[Executable]
    cache_hit = NO_CACHE_KEY
    root_connection: Connection
    dialect: Dialect
    unicode_statement: str
    cursor: DBAPICursor
    compiled_parameters: List[_MutableCoreSingleExecuteParams]
    parameters: _DBAPIMultiExecuteParams
    extracted_parameters: Optional[Sequence[BindParameter[Any]]]
    @property
    def executemany(self): ...
    def identifier_preparer(self): ...
    def engine(self): ...
    def postfetch_cols(self) -> Optional[Sequence[Column[Any]]]: ...
    def prefetch_cols(self) -> Optional[Sequence[Column[Any]]]: ...
    def no_parameters(self): ...
    def connection(self): ...
    def create_cursor(self): ...
    def fetchall_for_returning(self, cursor): ...
    def create_default_cursor(self): ...
    def create_server_side_cursor(self) -> None: ...
    def pre_exec(self) -> None: ...
    def get_out_parameter_values(self, names) -> None: ...
    def post_exec(self) -> None: ...
    def get_result_processor(self, type_, colname, coltype): ...
    def get_lastrowid(self): ...
    def handle_dbapi_exception(self, e) -> None: ...
    def rowcount(self) -> int: ...
    def supports_sane_rowcount(self): ...
    def supports_sane_multi_rowcount(self): ...
    def inserted_primary_key_rows(self): ...
    def lastrow_has_defaults(self): ...
    current_parameters: Optional[_CoreSingleExecuteParams]
    def get_current_parameters(self, isolate_multiinsert_groups: bool = ...): ...
    def get_insert_default(self, column): ...
    def get_update_default(self, column): ...
