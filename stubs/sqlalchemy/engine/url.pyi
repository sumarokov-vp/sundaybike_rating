from .. import exc as exc, util as util
from ..dialects import plugins as plugins, registry as registry
from .interfaces import Dialect as Dialect
from typing import Any, Dict, Iterable, List, Mapping, NamedTuple, Optional, Sequence, Tuple, Type, Union

class URL(NamedTuple):
    drivername: str
    username: Optional[str]
    password: Optional[str]
    host: Optional[str]
    port: Optional[int]
    database: Optional[str]
    query: util.immutabledict[str, Union[Tuple[str, ...], str]]
    @classmethod
    def create(cls, drivername: str, username: Optional[str] = ..., password: Optional[str] = ..., host: Optional[str] = ..., port: Optional[int] = ..., database: Optional[str] = ..., query: Mapping[str, Union[Sequence[str], str]] = ...) -> URL: ...
    def set(self, drivername: Optional[str] = ..., username: Optional[str] = ..., password: Optional[str] = ..., host: Optional[str] = ..., port: Optional[int] = ..., database: Optional[str] = ..., query: Optional[Mapping[str, Union[Sequence[str], str]]] = ...) -> URL: ...
    def update_query_string(self, query_string: str, append: bool = ...) -> URL: ...
    def update_query_pairs(self, key_value_pairs: Iterable[Tuple[str, Union[str, List[str]]]], append: bool = ...) -> URL: ...
    def update_query_dict(self, query_parameters: Mapping[str, Union[str, List[str]]], append: bool = ...) -> URL: ...
    def difference_update_query(self, names: Iterable[str]) -> URL: ...
    @property
    def normalized_query(self) -> Mapping[str, Sequence[str]]: ...
    def __to_string__(self, hide_password: bool = ...) -> str: ...
    def render_as_string(self, hide_password: bool = ...) -> str: ...
    def __copy__(self) -> URL: ...
    def __deepcopy__(self, memo: Any) -> URL: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def get_backend_name(self) -> str: ...
    def get_driver_name(self) -> str: ...
    def get_dialect(self, _is_async: bool = ...) -> Type[Dialect]: ...
    def translate_connect_args(self, names: Optional[List[str]] = ..., **kw: Any) -> Dict[str, Any]: ...

def make_url(name_or_url: Union[str, URL]) -> URL: ...
