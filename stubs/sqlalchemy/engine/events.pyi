from .. import event as event, exc as exc
from ..pool import ConnectionPoolEntry as ConnectionPoolEntry
from ..sql import Executable as Executable
from ..sql.elements import BindParameter as BindParameter
from ..util.typing import Literal as Literal
from .base import Connection as Connection, Engine as Engine
from .interfaces import ConnectionEventsTarget as ConnectionEventsTarget, DBAPIConnection as DBAPIConnection, DBAPICursor as DBAPICursor, Dialect as Dialect, ExceptionContext as ExceptionContext, ExecutionContext as ExecutionContext, _CoreMultiExecuteParams, _CoreSingleExecuteParams, _DBAPIAnyExecuteParams, _DBAPIMultiExecuteParams, _DBAPISingleExecuteParams, _ExecuteOptions
from .result import Result as Result
from typing import Any, Dict, Optional, Tuple

class ConnectionEvents(event.Events[ConnectionEventsTarget]):
    def before_execute(self, conn: Connection, clauseelement: Executable, multiparams: _CoreMultiExecuteParams, params: _CoreSingleExecuteParams, execution_options: _ExecuteOptions) -> Optional[Tuple[Executable, _CoreMultiExecuteParams, _CoreSingleExecuteParams]]: ...
    def after_execute(self, conn: Connection, clauseelement: Executable, multiparams: _CoreMultiExecuteParams, params: _CoreSingleExecuteParams, execution_options: _ExecuteOptions, result: Result[Any]) -> None: ...
    def before_cursor_execute(self, conn: Connection, cursor: DBAPICursor, statement: str, parameters: _DBAPIAnyExecuteParams, context: Optional[ExecutionContext], executemany: bool) -> Optional[Tuple[str, _DBAPIAnyExecuteParams]]: ...
    def after_cursor_execute(self, conn: Connection, cursor: DBAPICursor, statement: str, parameters: _DBAPIAnyExecuteParams, context: Optional[ExecutionContext], executemany: bool) -> None: ...
    def engine_connect(self, conn: Connection) -> None: ...
    def set_connection_execution_options(self, conn: Connection, opts: Dict[str, Any]) -> None: ...
    def set_engine_execution_options(self, engine: Engine, opts: Dict[str, Any]) -> None: ...
    def engine_disposed(self, engine: Engine) -> None: ...
    def begin(self, conn: Connection) -> None: ...
    def rollback(self, conn: Connection) -> None: ...
    def commit(self, conn: Connection) -> None: ...
    def savepoint(self, conn: Connection, name: str) -> None: ...
    def rollback_savepoint(self, conn: Connection, name: str, context: None) -> None: ...
    def release_savepoint(self, conn: Connection, name: str, context: None) -> None: ...
    def begin_twophase(self, conn: Connection, xid: Any) -> None: ...
    def prepare_twophase(self, conn: Connection, xid: Any) -> None: ...
    def rollback_twophase(self, conn: Connection, xid: Any, is_prepared: bool) -> None: ...
    def commit_twophase(self, conn: Connection, xid: Any, is_prepared: bool) -> None: ...

class DialectEvents(event.Events[Dialect]):
    def handle_error(self, exception_context: ExceptionContext) -> Optional[BaseException]: ...
    def do_connect(self, dialect: Dialect, conn_rec: ConnectionPoolEntry, cargs: Tuple[Any, ...], cparams: Dict[str, Any]) -> Optional[DBAPIConnection]: ...
    def do_executemany(self, cursor: DBAPICursor, statement: str, parameters: _DBAPIMultiExecuteParams, context: ExecutionContext) -> Optional[Literal[True]]: ...
    def do_execute_no_params(self, cursor: DBAPICursor, statement: str, context: ExecutionContext) -> Optional[Literal[True]]: ...
    def do_execute(self, cursor: DBAPICursor, statement: str, parameters: _DBAPISingleExecuteParams, context: ExecutionContext) -> Optional[Literal[True]]: ...
    def do_setinputsizes(self, inputsizes: Dict[BindParameter[Any], Any], cursor: DBAPICursor, statement: str, parameters: _DBAPIAnyExecuteParams, context: ExecutionContext) -> None: ...
