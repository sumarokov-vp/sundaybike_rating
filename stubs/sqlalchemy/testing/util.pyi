import gc
from . import config as config, mock as mock
from .. import inspect as inspect
from ..engine import Connection as Connection
from ..schema import Column as Column, DropConstraint as DropConstraint, DropTable as DropTable, ForeignKeyConstraint as ForeignKeyConstraint, MetaData as MetaData, Table as Table
from ..sql import schema as schema
from ..sql.sqltypes import Integer as Integer
from ..util import decorator as decorator, defaultdict as defaultdict, has_refcount_gc as has_refcount_gc, inspect_getfullargspec as inspect_getfullargspec
from _typeshed import Incomplete
from collections.abc import Generator

def non_refcount_gc_collect(*args) -> None: ...
gc_collect = non_refcount_gc_collect
lazy_gc = non_refcount_gc_collect
gc_collect = gc.collect

def picklers() -> Generator[Incomplete, None, Incomplete]: ...
def random_choices(population, k: int = ...): ...
def round_decimal(value, prec): ...

class RandomSet(set):
    def __iter__(self): ...
    def pop(self): ...
    def union(self, other): ...
    def difference(self, other): ...
    def intersection(self, other): ...
    def copy(self): ...

def conforms_partial_ordering(tuples, sorted_elements): ...
def all_partial_orderings(tuples, elements): ...
def function_named(fn, name): ...
def run_as_contextmanager(ctx, fn, *arg, **kw): ...
def rowset(results): ...
def fail(msg) -> None: ...
def provide_metadata(fn, *args, **kw): ...
def flag_combinations(*combinations): ...
def lambda_combinations(lambda_arg_sets, **kw): ...
def resolve_lambda(__fn, **kw): ...
def metadata_fixture(ddl: str = ...): ...
def force_drop_names(*names): ...

class adict(dict):
    def __getattribute__(self, key): ...
    def __call__(self, *keys): ...
    get_all = __call__

def drop_all_tables_from_metadata(metadata, engine_or_connection) -> None: ...
def drop_all_tables(engine, inspector, schema: Incomplete | None = ..., consider_schemas=..., include_names: Incomplete | None = ...) -> None: ...
def teardown_events(event_cls): ...
def total_size(o): ...
def count_cache_key_tuples(tup): ...
