from . import config as config
from .. import util as util
from ..util import decorator as decorator
from ..util.compat import inspect_getfullargspec as inspect_getfullargspec
from _typeshed import Incomplete
from collections.abc import Generator

def skip_if(predicate, reason: Incomplete | None = ...): ...
def fails_if(predicate, reason: Incomplete | None = ...): ...

class compound:
    fails: Incomplete
    skips: Incomplete
    def __init__(self) -> None: ...
    def __add__(self, other): ...
    def as_skips(self): ...
    def add(self, *others): ...
    def not_(self): ...
    @property
    def enabled(self): ...
    def enabled_for_config(self, config): ...
    def matching_config_reasons(self, config): ...
    def __call__(self, fn): ...
    def fail_if(self) -> Generator[None, None, None]: ...

def only_if(predicate, reason: Incomplete | None = ...): ...
def succeeds_if(predicate, reason: Incomplete | None = ...): ...

class Predicate:
    @classmethod
    def as_predicate(cls, predicate, description: Incomplete | None = ...): ...

class BooleanPredicate(Predicate):
    value: Incomplete
    description: Incomplete
    def __init__(self, value, description: Incomplete | None = ...) -> None: ...
    def __call__(self, config): ...

class SpecPredicate(Predicate):
    db: Incomplete
    op: Incomplete
    spec: Incomplete
    description: Incomplete
    def __init__(self, db, op: Incomplete | None = ..., spec: Incomplete | None = ..., description: Incomplete | None = ...) -> None: ...
    def __call__(self, config): ...

class LambdaPredicate(Predicate):
    lambda_: Incomplete
    args: Incomplete
    kw: Incomplete
    description: Incomplete
    def __init__(self, lambda_, description: Incomplete | None = ..., args: Incomplete | None = ..., kw: Incomplete | None = ...) -> None: ...
    def __call__(self, config): ...

class NotPredicate(Predicate):
    predicate: Incomplete
    description: Incomplete
    def __init__(self, predicate, description: Incomplete | None = ...) -> None: ...
    def __call__(self, config): ...

class OrPredicate(Predicate):
    predicates: Incomplete
    description: Incomplete
    def __init__(self, predicates, description: Incomplete | None = ...) -> None: ...
    def __call__(self, config): ...

def db_spec(*dbs): ...
def open(): ...
def closed(): ...
def fails(reason: Incomplete | None = ...): ...
def future(): ...
def fails_on(db, reason: Incomplete | None = ...): ...
def fails_on_everything_except(*dbs): ...
def skip(db, reason: Incomplete | None = ...): ...
def only_on(dbs, reason: Incomplete | None = ...): ...
def exclude(db, op, spec, reason: Incomplete | None = ...): ...
def against(config, *queries): ...
