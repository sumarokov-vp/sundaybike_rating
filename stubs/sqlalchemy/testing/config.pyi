from . import mock as mock
from .. import util as util
from .plugin.plugin_base import FixtureFunctions as FixtureFunctions
from .util import fail as fail
from _typeshed import Incomplete
from argparse import Namespace
from collections.abc import Generator
from typing import Any, Callable, Iterable, NoReturn, Optional, Tuple, Union

requirements: Incomplete
db: Incomplete
db_url: Incomplete
db_opts: Incomplete
file_config: Incomplete
test_schema: Incomplete
test_schema_2: Incomplete
any_async: bool
ident: str
options: Namespace

def combinations(*comb: Union[Any, Tuple[Any, ...]], argnames: Optional[str] = ..., id_: Optional[str] = ..., **kw: str) -> Callable[[_FN], _FN]: ...
def combinations_list(arg_iterable: Iterable[Tuple[Any, ...]], **kw): ...

class Variation:
    def __init__(self, case, argname, case_names) -> None: ...
    def __getattr__(self, key: str) -> bool: ...
    @property
    def name(self): ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self): ...
    def fail(self) -> NoReturn: ...
    @classmethod
    def idfn(cls, variation): ...
    @classmethod
    def generate_cases(cls, argname, cases): ...

def variation(argname_or_fn, cases: Incomplete | None = ...): ...
def variation_fixture(argname, cases, scope: str = ...): ...
def fixture(*arg: Any, **kw: Any) -> Any: ...
def get_current_test_name() -> str: ...
def mark_base_test_class() -> Any: ...

class _AddToMarker:
    def __getattr__(self, attr: str) -> Any: ...

add_to_marker: Incomplete

class Config:
    db: Incomplete
    db_opts: Incomplete
    options: Incomplete
    file_config: Incomplete
    test_schema: str
    test_schema_2: str
    is_async: Incomplete
    def __init__(self, db, db_opts, options, file_config) -> None: ...
    @classmethod
    def register(cls, db, db_opts, options, file_config): ...
    @classmethod
    def set_as_current(cls, config, namespace) -> None: ...
    @classmethod
    def push_engine(cls, db, namespace) -> None: ...
    @classmethod
    def push(cls, config, namespace) -> None: ...
    @classmethod
    def pop(cls, namespace) -> None: ...
    @classmethod
    def reset(cls, namespace) -> None: ...
    @classmethod
    def all_configs(cls): ...
    @classmethod
    def all_dbs(cls) -> Generator[Incomplete, None, None]: ...
    def skip_test(self, msg) -> None: ...

def skip_test(msg) -> None: ...
def async_test(fn): ...
