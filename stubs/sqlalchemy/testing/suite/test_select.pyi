from .. import AssertsCompiledSQL as AssertsCompiledSQL, AssertsExecutionResults as AssertsExecutionResults, config as config, fixtures as fixtures
from ... import Computed as Computed, ForeignKey as ForeignKey, Identity as Identity, Integer as Integer, String as String, TupleType as TupleType, bindparam as bindparam, case as case, column as column, exists as exists, false as false, func as func, literal as literal, literal_column as literal_column, null as null, select as select, table as table, testing as testing, text as text, true as true, tuple_ as tuple_, union as union, values as values
from ...exc import DatabaseError as DatabaseError, ProgrammingError as ProgrammingError
from ..assertions import assert_raises as assert_raises, eq_ as eq_, in_ as in_
from ..assertsql import CursorSQL as CursorSQL
from ..schema import Column as Column, Table as Table
from _typeshed import Incomplete

class CollateTest(fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_collate_order_by(self) -> None: ...

class OrderByLabelTest(fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_plain(self) -> None: ...
    def test_composed_int(self) -> None: ...
    def test_composed_multiple(self) -> None: ...
    def test_plain_desc(self) -> None: ...
    def test_composed_int_desc(self) -> None: ...
    def test_group_by_composed(self) -> None: ...

class ValuesExpressionTest(fixtures.TestBase):
    __requires__: Incomplete
    __backend__: bool
    def test_tuples(self, connection) -> None: ...

class FetchLimitOffsetTest(fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_simple_limit(self, connection) -> None: ...
    def test_limit_render_multiple_times(self, connection) -> None: ...
    def test_simple_fetch(self, connection) -> None: ...
    def test_simple_offset(self, connection) -> None: ...
    def test_simple_limit_offset(self, connection, cases) -> None: ...
    def test_simple_fetch_offset(self, connection) -> None: ...
    def test_fetch_offset_no_order(self, connection) -> None: ...
    def test_simple_offset_zero(self, connection) -> None: ...
    def test_limit_offset_nobinds(self) -> None: ...
    def test_fetch_offset_nobinds(self) -> None: ...
    def test_bound_limit(self, connection) -> None: ...
    def test_bound_offset(self, connection) -> None: ...
    def test_bound_limit_offset(self, connection) -> None: ...
    def test_bound_fetch_offset(self, connection) -> None: ...
    def test_expr_offset(self, connection) -> None: ...
    def test_expr_limit(self, connection) -> None: ...
    def test_expr_limit_offset(self, connection) -> None: ...
    def test_expr_fetch_offset(self, connection) -> None: ...
    def test_simple_limit_expr_offset(self, connection) -> None: ...
    def test_expr_limit_simple_offset(self, connection) -> None: ...
    def test_simple_fetch_ties(self, connection) -> None: ...
    def test_fetch_offset_ties(self, connection) -> None: ...
    def test_fetch_offset_ties_exact_number(self, connection) -> None: ...
    def test_simple_fetch_percent(self, connection) -> None: ...
    def test_fetch_offset_percent(self, connection) -> None: ...
    def test_simple_fetch_percent_ties(self, connection) -> None: ...
    def test_fetch_offset_percent_ties(self, connection) -> None: ...

class SameNamedSchemaTableTest(fixtures.TablesTest):
    __backend__: bool
    __requires__: Incomplete
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_simple_join_both_tables(self, connection) -> None: ...
    def test_simple_join_whereclause_only(self, connection) -> None: ...
    def test_subquery(self, connection) -> None: ...

class JoinTest(fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_inner_join_fk(self) -> None: ...
    def test_inner_join_true(self) -> None: ...
    def test_inner_join_false(self) -> None: ...
    def test_outer_join_false(self) -> None: ...
    def test_outer_join_fk(self) -> None: ...

class CompoundSelectTest(fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_plain_union(self) -> None: ...
    def test_select_from_plain_union(self) -> None: ...
    def test_limit_offset_selectable_in_unions(self) -> None: ...
    def test_order_by_selectable_in_unions(self) -> None: ...
    def test_distinct_selectable_in_unions(self) -> None: ...
    def test_limit_offset_in_unions_from_alias(self) -> None: ...
    def test_limit_offset_aliased_selectable_in_unions(self) -> None: ...

class PostCompileParamsTest(AssertsExecutionResults, AssertsCompiledSQL, fixtures.TablesTest):
    __backend__: bool
    __requires__: Incomplete
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_compile(self) -> None: ...
    def test_compile_literal_binds(self) -> None: ...
    def test_execute(self) -> None: ...
    def test_execute_expanding_plus_literal_execute(self) -> None: ...
    def test_execute_tuple_expanding_plus_literal_execute(self) -> None: ...
    def test_execute_tuple_expanding_plus_literal_heterogeneous_execute(self) -> None: ...

class ExpandingBoundInTest(fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_multiple_empty_sets_bindparam(self) -> None: ...
    def test_multiple_empty_sets_direct(self) -> None: ...
    def test_empty_heterogeneous_tuples_bindparam(self) -> None: ...
    def test_empty_heterogeneous_tuples_direct(self) -> None: ...
    def test_empty_homogeneous_tuples_bindparam(self) -> None: ...
    def test_empty_homogeneous_tuples_direct(self) -> None: ...
    def test_bound_in_scalar_bindparam(self) -> None: ...
    def test_bound_in_scalar_direct(self) -> None: ...
    def test_nonempty_in_plus_empty_notin(self) -> None: ...
    def test_empty_in_plus_notempty_notin(self) -> None: ...
    def test_typed_str_in(self) -> None: ...
    def test_untyped_str_in(self) -> None: ...
    def test_bound_in_two_tuple_bindparam(self) -> None: ...
    def test_bound_in_two_tuple_direct(self) -> None: ...
    def test_bound_in_heterogeneous_two_tuple_bindparam(self) -> None: ...
    def test_bound_in_heterogeneous_two_tuple_direct(self) -> None: ...
    def test_bound_in_heterogeneous_two_tuple_text_bindparam(self) -> None: ...
    def test_bound_in_heterogeneous_two_tuple_typed_bindparam_non_tuple(self): ...
    def test_bound_in_heterogeneous_two_tuple_text_bindparam_non_tuple(self): ...
    def test_empty_set_against_integer_bindparam(self) -> None: ...
    def test_empty_set_against_integer_direct(self) -> None: ...
    def test_empty_set_against_integer_negation_bindparam(self) -> None: ...
    def test_empty_set_against_integer_negation_direct(self) -> None: ...
    def test_empty_set_against_string_bindparam(self) -> None: ...
    def test_empty_set_against_string_direct(self) -> None: ...
    def test_empty_set_against_string_negation_bindparam(self) -> None: ...
    def test_empty_set_against_string_negation_direct(self) -> None: ...
    def test_null_in_empty_set_is_false_bindparam(self, connection) -> None: ...
    def test_null_in_empty_set_is_false_direct(self, connection) -> None: ...

class LikeFunctionsTest(fixtures.TablesTest):
    __backend__: bool
    run_inserts: str
    run_deletes: Incomplete
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_startswith_unescaped(self) -> None: ...
    def test_startswith_autoescape(self) -> None: ...
    def test_startswith_sqlexpr(self) -> None: ...
    def test_startswith_escape(self) -> None: ...
    def test_startswith_autoescape_escape(self) -> None: ...
    def test_endswith_unescaped(self) -> None: ...
    def test_endswith_sqlexpr(self) -> None: ...
    def test_endswith_autoescape(self) -> None: ...
    def test_endswith_escape(self) -> None: ...
    def test_endswith_autoescape_escape(self) -> None: ...
    def test_contains_unescaped(self) -> None: ...
    def test_contains_autoescape(self) -> None: ...
    def test_contains_escape(self) -> None: ...
    def test_contains_autoescape_escape(self) -> None: ...
    def test_not_regexp_match(self) -> None: ...
    def test_regexp_replace(self) -> None: ...
    def test_regexp_match(self, text, expected) -> None: ...

class ComputedColumnTest(fixtures.TablesTest):
    __backend__: bool
    __requires__: Incomplete
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_select_all(self) -> None: ...
    def test_select_columns(self) -> None: ...

class IdentityColumnTest(fixtures.TablesTest):
    __backend__: bool
    __requires__: Incomplete
    run_inserts: str
    run_deletes: str
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_select_all(self, connection) -> None: ...
    def test_select_columns(self, connection) -> None: ...
    def test_insert_always_error(self, connection) -> None: ...

class IdentityAutoincrementTest(fixtures.TablesTest):
    __backend__: bool
    __requires__: Incomplete
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_autoincrement_with_identity(self, connection) -> None: ...

class ExistsTest(fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def insert_data(cls, connection) -> None: ...
    def test_select_exists(self, connection) -> None: ...
    def test_select_exists_false(self, connection) -> None: ...

class DistinctOnTest(AssertsCompiledSQL, fixtures.TablesTest):
    __backend__: bool
    def test_distinct_on(self) -> None: ...

class IsOrIsNotDistinctFromTest(fixtures.TablesTest):
    __backend__: bool
    __requires__: Incomplete
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_is_or_is_not_distinct_from(self, col_a_value, col_b_value, expected_row_count_for_is, connection) -> None: ...
