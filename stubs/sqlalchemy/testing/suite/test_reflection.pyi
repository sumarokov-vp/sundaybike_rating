from .. import fixtures
from ...testing import ComparesIndexes, ComparesTables
from _typeshed import Incomplete

class OneConnectionTablesTest(fixtures.TablesTest):
    @classmethod
    def setup_bind(cls): ...

class HasTableTest(OneConnectionTablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def define_views(cls, metadata) -> None: ...
    @classmethod
    def temp_table_name(cls): ...
    @classmethod
    def define_temp_tables(cls, metadata) -> None: ...
    def test_has_table(self) -> None: ...
    def test_has_table_cache(self, metadata) -> None: ...
    def test_has_table_schema(self) -> None: ...
    def test_has_table_nonexistent_schema(self) -> None: ...
    def test_has_table_view(self, connection) -> None: ...
    def test_has_table_temp_table(self, connection) -> None: ...
    def test_has_table_temp_view(self, connection) -> None: ...
    def test_has_table_view_schema(self, connection) -> None: ...

class HasIndexTest(fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    kind: Incomplete
    def test_has_index(self, kind, connection, metadata) -> None: ...
    def test_has_index_schema(self, kind, connection) -> None: ...

class BizarroCharacterFKResolutionTest(fixtures.TestBase):
    __backend__: bool
    def test_fk_ref(self, connection, metadata, use_composite, tablename, columnname) -> None: ...

class QuotedNameArgumentTest(fixtures.TablesTest):
    run_create_tables: str
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def quote_fixtures(fn): ...
    def test_get_table_options(self, name) -> None: ...
    def test_get_view_definition(self, name) -> None: ...
    def test_get_columns(self, name) -> None: ...
    def test_get_pk_constraint(self, name) -> None: ...
    def test_get_foreign_keys(self, name) -> None: ...
    def test_get_indexes(self, name) -> None: ...
    def test_get_unique_constraints(self, name) -> None: ...
    def test_get_table_comment(self, name) -> None: ...
    def test_get_check_constraints(self, name) -> None: ...

class ComponentReflectionTest(ComparesTables, OneConnectionTablesTest):
    run_inserts: Incomplete
    run_deletes: Incomplete
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    @classmethod
    def define_reflected_tables(cls, metadata, schema) -> None: ...
    @classmethod
    def temp_table_name(cls): ...
    @classmethod
    def define_temp_tables(cls, metadata) -> None: ...
    @classmethod
    def define_views(cls, metadata, schema) -> None: ...
    def exp_options(self, schema: Incomplete | None = ..., scope=..., kind=..., filter_names: Incomplete | None = ...): ...
    def exp_comments(self, schema: Incomplete | None = ..., scope=..., kind=..., filter_names: Incomplete | None = ...): ...
    def exp_columns(self, schema: Incomplete | None = ..., scope=..., kind=..., filter_names: Incomplete | None = ...): ...
    def exp_pks(self, schema: Incomplete | None = ..., scope=..., kind=..., filter_names: Incomplete | None = ...): ...
    def exp_fks(self, schema: Incomplete | None = ..., scope=..., kind=..., filter_names: Incomplete | None = ...): ...
    def exp_indexes(self, schema: Incomplete | None = ..., scope=..., kind=..., filter_names: Incomplete | None = ...): ...
    def exp_ucs(self, schema: Incomplete | None = ..., scope=..., kind=..., filter_names: Incomplete | None = ..., all_: bool = ...): ...
    def exp_ccs(self, schema: Incomplete | None = ..., scope=..., kind=..., filter_names: Incomplete | None = ...): ...
    def test_get_schema_names(self, connection) -> None: ...
    def test_has_schema(self, connection) -> None: ...
    def test_get_schema_names_w_translate_map(self, connection) -> None: ...
    def test_has_schema_w_translate_map(self, connection) -> None: ...
    def test_schema_cache(self, connection) -> None: ...
    def test_dialect_initialize(self) -> None: ...
    def test_get_default_schema_name(self, connection) -> None: ...
    def test_get_table_names(self, connection, order_by, use_schema) -> None: ...
    def test_get_view_names(self, connection, use_schema) -> None: ...
    def test_get_temp_table_names(self, connection) -> None: ...
    def test_get_temp_view_names(self, connection) -> None: ...
    def test_get_comments(self, connection) -> None: ...
    def test_get_comments_with_schema(self, connection) -> None: ...
    def test_get_columns(self, connection, use_views, use_schema) -> None: ...
    def test_reflect_table_temp_table(self, connection) -> None: ...
    def test_get_temp_table_columns(self, connection) -> None: ...
    def test_get_temp_view_columns(self, connection) -> None: ...
    def test_get_pk_constraint(self, connection, use_schema) -> None: ...
    def test_get_foreign_keys(self, connection, use_schema) -> None: ...
    def test_get_inter_schema_foreign_keys(self, connection) -> None: ...
    def test_get_indexes(self, connection, use_schema) -> None: ...
    def test_get_noncol_index(self, connection, tname, ixname) -> None: ...
    def test_get_temp_table_unique_constraints(self, connection) -> None: ...
    def test_get_temp_table_indexes(self, connection) -> None: ...
    def test_get_unique_constraints(self, metadata, connection, use_schema) -> None: ...
    def test_get_view_definition(self, connection, use_schema) -> None: ...
    def test_get_view_definition_does_not_exist(self, connection) -> None: ...
    def test_autoincrement_col(self, connection) -> None: ...
    def test_get_table_options(self, use_schema) -> None: ...
    def test_multi_get_table_options(self, use_schema) -> None: ...
    def get_multi_exp(self, connection): ...
    def test_multi_get_table_options_tables(self, get_multi_exp, schema, scope, kind, use_filter) -> None: ...
    def test_get_multi_table_comment(self, get_multi_exp, schema, scope, kind, use_filter) -> None: ...
    def test_get_multi_columns(self, get_multi_exp, schema, scope, kind, use_filter) -> None: ...
    def test_get_multi_pk_constraint(self, get_multi_exp, schema, scope, kind, use_filter) -> None: ...
    def test_get_multi_foreign_keys(self, get_multi_exp, schema, scope, kind, use_filter): ...
    def test_get_multi_indexes(self, get_multi_exp, schema, scope, kind, use_filter) -> None: ...
    def test_get_multi_unique_constraints(self, get_multi_exp, schema, scope, kind, use_filter): ...
    def test_get_multi_check_constraints(self, get_multi_exp, schema, scope, kind, use_filter): ...
    def test_not_existing_table(self, method, connection) -> None: ...
    def test_unreflectable(self, connection): ...
    def test_metadata(self, connection, use_schema, views) -> None: ...
    def test_comments_unicode(self, connection, metadata) -> None: ...
    def test_comments_unicode_full(self, connection, metadata) -> None: ...

class TableNoColumnsTest(fixtures.TestBase):
    __requires__: Incomplete
    __backend__: bool
    def table_no_columns(self, connection, metadata) -> None: ...
    def view_no_columns(self, connection, metadata) -> None: ...
    def test_reflect_table_no_columns(self, connection, table_no_columns) -> None: ...
    def test_get_columns_table_no_columns(self, connection, table_no_columns) -> None: ...
    def test_reflect_incl_table_no_columns(self, connection, table_no_columns) -> None: ...
    def test_reflect_view_no_columns(self, connection, view_no_columns) -> None: ...
    def test_get_columns_view_no_columns(self, connection, view_no_columns) -> None: ...

class ComponentReflectionTestExtra(ComparesIndexes, fixtures.TestBase):
    __backend__: bool
    def test_get_check_constraints(self, metadata, connection, use_schema): ...
    def test_reflect_expression_based_indexes(self, metadata, connection): ...
    def test_reflect_covering_index(self, metadata, connection) -> None: ...
    def test_numeric_reflection(self, connection, metadata) -> None: ...
    def test_varchar_reflection(self, connection, metadata) -> None: ...
    def test_nullable_reflection(self, connection, metadata) -> None: ...
    def test_get_foreign_key_options(self, connection, metadata, expected, ondelete, onupdate) -> None: ...

class NormalizedNameTest(fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_reflect_lowercase_forced_tables(self): ...
    def test_get_table_names(self) -> None: ...

class ComputedReflectionTest(fixtures.ComputedReflectionFixtureTest):
    def test_computed_col_default_not_set(self) -> None: ...
    def test_get_column_returns_computed(self) -> None: ...
    def check_column(self, data, column, sqltext, persisted) -> None: ...
    def test_get_column_returns_persisted(self) -> None: ...
    def test_get_column_returns_persisted_with_schema(self) -> None: ...

class IdentityReflectionTest(fixtures.TablesTest):
    run_inserts: Incomplete
    run_deletes: Incomplete
    __backend__: bool
    __requires__: Incomplete
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def check(self, value, exp, approx) -> None: ...
    def test_reflect_identity(self) -> None: ...
    def test_reflect_identity_schema(self) -> None: ...

class CompositeKeyReflectionTest(fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_pk_column_order(self, connection) -> None: ...
    def test_fk_column_order(self, connection) -> None: ...
