from .. import fixtures
from ... import Date, DateTime, Interval, JSON, TIMESTAMP, Time, UUID, Uuid
from _typeshed import Incomplete

class _LiteralRoundTripFixture:
    supports_whereclause: bool
    def literal_round_trip(self, metadata, connection): ...

class _UnicodeFixture(_LiteralRoundTripFixture, fixtures.TestBase):
    __requires__: Incomplete
    data: str
    @property
    def supports_whereclause(self): ...
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_round_trip(self, connection) -> None: ...
    def test_round_trip_executemany(self, connection) -> None: ...
    def test_literal(self, literal_round_trip) -> None: ...
    def test_literal_non_ascii(self, literal_round_trip) -> None: ...

class UnicodeVarcharTest(_UnicodeFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype: Incomplete
    def test_empty_strings_varchar(self, connection) -> None: ...
    def test_null_strings_varchar(self, connection) -> None: ...

class UnicodeTextTest(_UnicodeFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype: Incomplete
    def test_empty_strings_text(self, connection) -> None: ...
    def test_null_strings_text(self, connection) -> None: ...

class ArrayTest(_LiteralRoundTripFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_array_roundtrip(self, connection) -> None: ...
    def test_literal_simple(self, literal_round_trip) -> None: ...
    def test_literal_complex(self, literal_round_trip) -> None: ...

class BinaryTest(_LiteralRoundTripFixture, fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_binary_roundtrip(self, connection, data) -> None: ...
    def test_pickle_roundtrip(self, connection) -> None: ...

class TextTest(_LiteralRoundTripFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    @property
    def supports_whereclause(self): ...
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_text_roundtrip(self, connection) -> None: ...
    def test_text_empty_strings(self, connection) -> None: ...
    def test_text_null_strings(self, connection) -> None: ...
    def test_literal(self, literal_round_trip) -> None: ...
    def test_literal_non_ascii(self, literal_round_trip) -> None: ...
    def test_literal_quoting(self, literal_round_trip) -> None: ...
    def test_literal_backslashes(self, literal_round_trip) -> None: ...
    def test_literal_percentsigns(self, literal_round_trip) -> None: ...

class StringTest(_LiteralRoundTripFixture, fixtures.TestBase):
    __backend__: bool
    def test_nolength_string(self) -> None: ...
    def test_literal(self, literal_round_trip) -> None: ...
    def test_literal_non_ascii(self, literal_round_trip) -> None: ...
    def test_dont_truncate_rightside(self, metadata, connection, expr, expected) -> None: ...
    def test_literal_quoting(self, literal_round_trip) -> None: ...
    def test_literal_backslashes(self, literal_round_trip) -> None: ...
    def test_concatenate_binary(self, connection) -> None: ...
    def test_concatenate_clauselist(self, connection) -> None: ...

class IntervalTest(_LiteralRoundTripFixture, fixtures.TestBase):
    __requires__: Incomplete
    __backend__: bool
    datatype = Interval
    data: Incomplete
    def test_literal(self, literal_round_trip) -> None: ...
    def test_select_direct_literal_interval(self, connection) -> None: ...
    def test_arithmetic_operation_literal_interval(self, connection) -> None: ...
    def arithmetic_table_fixture(cls, metadata, connection): ...
    def test_arithmetic_operation_table_interval_and_literal_interval(self, connection, arithmetic_table_fixture) -> None: ...
    def test_arithmetic_operation_table_date_and_literal_interval(self, connection, arithmetic_table_fixture) -> None: ...

class PrecisionIntervalTest(IntervalTest):
    __requires__: Incomplete
    __backend__: bool
    datatype: Incomplete
    data: Incomplete

class _DateFixture(_LiteralRoundTripFixture, fixtures.TestBase):
    compare: Incomplete
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_round_trip(self, connection) -> None: ...
    def test_round_trip_decorated(self, connection) -> None: ...
    def test_null(self, connection) -> None: ...
    def test_literal(self, literal_round_trip) -> None: ...
    def test_null_bound_comparison(self) -> None: ...

class DateTimeTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = DateTime
    data: Incomplete
    def test_select_direct(self, connection) -> None: ...

class DateTimeTZTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype: Incomplete
    data: Incomplete
    def test_select_direct(self, connection) -> None: ...

class DateTimeMicrosecondsTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = DateTime
    data: Incomplete

class TimestampMicrosecondsTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = TIMESTAMP
    data: Incomplete
    def test_select_direct(self, connection) -> None: ...

class TimeTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = Time
    data: Incomplete
    def test_select_direct(self, connection) -> None: ...

class TimeTZTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype: Incomplete
    data: Incomplete
    def test_select_direct(self, connection) -> None: ...

class TimeMicrosecondsTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = Time
    data: Incomplete
    def test_select_direct(self, connection) -> None: ...

class DateTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = Date
    data: Incomplete
    def test_select_direct(self, connection) -> None: ...

class DateTimeCoercedToDateTimeTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = Date
    data: Incomplete
    compare: Incomplete
    def test_select_direct(self, connection) -> None: ...

class DateTimeHistoricTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = DateTime
    data: Incomplete
    def test_select_direct(self, connection) -> None: ...

class DateHistoricTest(_DateFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = Date
    data: Incomplete
    def test_select_direct(self, connection) -> None: ...

class IntegerTest(_LiteralRoundTripFixture, fixtures.TestBase):
    __backend__: bool
    def test_literal(self, literal_round_trip) -> None: ...
    def test_huge_int_auto_accommodation(self, connection, intvalue) -> None: ...
    def test_huge_int(self, integer_round_trip, intvalue) -> None: ...
    def integer_round_trip(self, metadata, connection): ...

class CastTypeDecoratorTest(_LiteralRoundTripFixture, fixtures.TestBase):
    __backend__: bool
    def string_as_int(self): ...
    def test_special_type(self, metadata, connection, string_as_int) -> None: ...

class TrueDivTest(fixtures.TestBase):
    __backend__: bool
    def test_truediv_integer(self, connection, left, right, expected) -> None: ...
    def test_floordiv_integer(self, connection, left, right, expected) -> None: ...
    def test_truediv_numeric(self, connection, left, right, expected) -> None: ...
    def test_truediv_float(self, connection, left, right, expected) -> None: ...
    def test_floordiv_numeric(self, connection, left, right, expected) -> None: ...
    def test_truediv_integer_bound(self, connection) -> None: ...
    def test_floordiv_integer_bound(self, connection) -> None: ...

class NumericTest(_LiteralRoundTripFixture, fixtures.TestBase):
    __backend__: bool
    def do_numeric_test(self, metadata, connection): ...
    def test_render_literal_numeric(self, literal_round_trip) -> None: ...
    def test_render_literal_numeric_asfloat(self, literal_round_trip) -> None: ...
    def test_render_literal_float(self, literal_round_trip): ...
    def test_float_custom_scale(self, do_numeric_test) -> None: ...
    def test_numeric_as_decimal(self, do_numeric_test) -> None: ...
    def test_numeric_as_float(self, do_numeric_test) -> None: ...
    def test_infinity_floats(self, do_numeric_test) -> None: ...
    def test_numeric_null_as_decimal(self, do_numeric_test) -> None: ...
    def test_numeric_null_as_float(self, do_numeric_test) -> None: ...
    def test_float_as_decimal(self, do_numeric_test): ...
    def test_float_as_float(self, do_numeric_test): ...
    def test_float_coerce_round_trip(self, connection) -> None: ...
    def test_decimal_coerce_round_trip(self, connection) -> None: ...
    def test_decimal_coerce_round_trip_w_cast(self, connection) -> None: ...
    def test_precision_decimal(self, do_numeric_test) -> None: ...
    def test_enotation_decimal(self, do_numeric_test) -> None: ...
    def test_enotation_decimal_large(self, do_numeric_test) -> None: ...
    def test_many_significant_digits(self, do_numeric_test) -> None: ...
    def test_numeric_no_decimal(self, do_numeric_test) -> None: ...
    def test_float_is_not_numeric(self, connection, cls_) -> None: ...

class BooleanTest(_LiteralRoundTripFixture, fixtures.TablesTest):
    __backend__: bool
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_render_literal_bool(self, literal_round_trip) -> None: ...
    def test_round_trip(self, connection) -> None: ...
    def test_null(self, connection) -> None: ...
    def test_whereclause(self) -> None: ...

class JSONTest(_LiteralRoundTripFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = JSON
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_round_trip_data1(self, connection) -> None: ...
    def test_round_trip_pretty_large_data(self, connection, unicode_, length) -> None: ...
    def test_index_typed_access(self, datatype, value) -> None: ...
    def test_index_typed_comparison(self, datatype, value) -> None: ...
    def test_path_typed_comparison(self, datatype, value) -> None: ...
    def test_single_element_round_trip(self, element) -> None: ...
    def test_round_trip_custom_json(self) -> None: ...
    def test_round_trip_none_as_sql_null(self, connection, insert_type) -> None: ...
    def test_round_trip_json_null_as_json_null(self, connection) -> None: ...
    def test_round_trip_none_as_json_null(self, connection, insert_type) -> None: ...
    def test_unicode_round_trip(self) -> None: ...
    def test_eval_none_flag_orm(self, connection) -> None: ...

class JSONLegacyStringCastIndexTest(_LiteralRoundTripFixture, fixtures.TablesTest):
    __requires__: Incomplete
    __backend__: bool
    datatype = JSON
    data1: Incomplete
    data2: Incomplete
    data3: Incomplete
    data4: Incomplete
    data5: Incomplete
    data6: Incomplete
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_string_cast_crit_spaces_in_key(self) -> None: ...
    def test_string_cast_crit_simple_int(self) -> None: ...
    def test_string_cast_crit_mixed_path(self) -> None: ...
    def test_string_cast_crit_string_path(self) -> None: ...
    def test_string_cast_crit_against_string_basic(self) -> None: ...

class UuidTest(_LiteralRoundTripFixture, fixtures.TablesTest):
    __backend__: bool
    datatype = Uuid
    @classmethod
    def define_tables(cls, metadata) -> None: ...
    def test_uuid_round_trip(self, connection) -> None: ...
    def test_uuid_text_round_trip(self, connection) -> None: ...
    def test_literal_uuid(self, literal_round_trip) -> None: ...
    def test_literal_text(self, literal_round_trip): ...
    def test_literal_nonnative_uuid(self, literal_round_trip) -> None: ...
    def test_literal_nonnative_text(self, literal_round_trip): ...
    def test_uuid_returning(self, connection) -> None: ...

class NativeUUIDTest(UuidTest):
    __requires__: Incomplete
    datatype = UUID
