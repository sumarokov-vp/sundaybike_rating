from .. import sql as sql, util as util
from ..exc import InvalidRequestError as InvalidRequestError
from ..sql._typing import _AutoIncrementType, _ColumnExpressionArgument, _FromClauseArgument, _InfoType, _OnClauseArgument, _TypeEngineArgument
from ..sql.base import SchemaEventTarget as SchemaEventTarget, _NoArg
from ..sql.elements import ColumnElement as ColumnElement
from ..sql.schema import FetchedValue as FetchedValue, SchemaConst as SchemaConst, _ServerDefaultArgument
from ..sql.selectable import Alias as Alias, FromClause as FromClause, Subquery as Subquery
from ..util.typing import Annotated as Annotated, Literal as Literal
from ._typing import _EntityType, _O, _ORMColumnExprArgument
from .descriptor_props import Composite as Composite, Synonym as Synonym, _CC, _CompositeAttrType
from .interfaces import PropComparator as PropComparator
from .mapper import Mapper as Mapper
from .properties import MappedColumn as MappedColumn, MappedSQLExpression as MappedSQLExpression
from .query import AliasOption as AliasOption, Query as Query
from .relationships import ORMBackrefArgument as ORMBackrefArgument, Relationship as Relationship, RelationshipProperty as RelationshipProperty, _LazyLoadArgumentType, _ORMColCollectionArgument, _ORMOrderByArgument, _RelationshipArgumentType, _RelationshipJoinConditionArgument, _RelationshipSecondaryArgument
from .session import Session as Session, _SessionBind
from .util import AliasedClass as AliasedClass, AliasedInsp as AliasedInsp, LoaderCriteriaOption as LoaderCriteriaOption, _ORMJoin
from _typeshed import Incomplete
from typing import Any, Callable, Collection, Iterable, Optional, Type, Union, overload

def contains_alias(alias: Union[Alias, Subquery]) -> AliasOption: ...
def mapped_column(__name_pos: Optional[Union[str, _TypeEngineArgument[Any], SchemaEventTarget]] = ..., __type_pos: Optional[Union[_TypeEngineArgument[Any], SchemaEventTarget]] = ..., *args: SchemaEventTarget, init: Union[_NoArg, bool] = ..., repr: Union[_NoArg, bool] = ..., default: Optional[Any] = ..., default_factory: Union[_NoArg, Callable[[], _T]] = ..., compare: Union[_NoArg, bool] = ..., kw_only: Union[_NoArg, bool] = ..., nullable: Optional[Union[bool, Literal[SchemaConst.NULL_UNSPECIFIED]]] = ..., primary_key: Optional[bool] = ..., deferred: Union[_NoArg, bool] = ..., deferred_group: Optional[str] = ..., deferred_raiseload: Optional[bool] = ..., use_existing_column: bool = ..., name: Optional[str] = ..., type_: Optional[_TypeEngineArgument[Any]] = ..., autoincrement: _AutoIncrementType = ..., doc: Optional[str] = ..., key: Optional[str] = ..., index: Optional[bool] = ..., unique: Optional[bool] = ..., info: Optional[_InfoType] = ..., onupdate: Optional[Any] = ..., insert_default: Optional[Any] = ..., server_default: Optional[_ServerDefaultArgument] = ..., server_onupdate: Optional[FetchedValue] = ..., active_history: bool = ..., quote: Optional[bool] = ..., system: bool = ..., comment: Optional[str] = ..., sort_order: Union[_NoArg, int] = ..., **kw: Any) -> MappedColumn[Any]: ...
def orm_insert_sentinel(name: Optional[str] = ..., type_: Optional[_TypeEngineArgument[Any]] = ..., *, default: Optional[Any] = ..., omit_from_statements: bool = ...) -> MappedColumn[Any]: ...
def column_property(column: _ORMColumnExprArgument[_T], *additional_columns: _ORMColumnExprArgument[Any], group: Optional[str] = ..., deferred: bool = ..., raiseload: bool = ..., comparator_factory: Optional[Type[PropComparator[_T]]] = ..., init: Union[_NoArg, bool] = ..., repr: Union[_NoArg, bool] = ..., default: Optional[Any] = ..., default_factory: Union[_NoArg, Callable[[], _T]] = ..., compare: Union[_NoArg, bool] = ..., kw_only: Union[_NoArg, bool] = ..., active_history: bool = ..., expire_on_flush: bool = ..., info: Optional[_InfoType] = ..., doc: Optional[str] = ...) -> MappedSQLExpression[_T]: ...
@overload
def composite(_class_or_attr: _CompositeAttrType[Any], *attrs: _CompositeAttrType[Any], group: Optional[str] = ..., deferred: bool = ..., raiseload: bool = ..., comparator_factory: Optional[Type[Composite.Comparator[_T]]] = ..., active_history: bool = ..., init: Union[_NoArg, bool] = ..., repr: Union[_NoArg, bool] = ..., default: Optional[Any] = ..., default_factory: Union[_NoArg, Callable[[], _T]] = ..., compare: Union[_NoArg, bool] = ..., kw_only: Union[_NoArg, bool] = ..., info: Optional[_InfoType] = ..., doc: Optional[str] = ..., **__kw: Any) -> Composite[Any]: ...
@overload
def composite(_class_or_attr: Type[_CC], *attrs: _CompositeAttrType[Any], group: Optional[str] = ..., deferred: bool = ..., raiseload: bool = ..., comparator_factory: Optional[Type[Composite.Comparator[_T]]] = ..., active_history: bool = ..., init: Union[_NoArg, bool] = ..., repr: Union[_NoArg, bool] = ..., default: Optional[Any] = ..., default_factory: Union[_NoArg, Callable[[], _T]] = ..., compare: Union[_NoArg, bool] = ..., kw_only: Union[_NoArg, bool] = ..., info: Optional[_InfoType] = ..., doc: Optional[str] = ..., **__kw: Any) -> Composite[_CC]: ...
@overload
def composite(_class_or_attr: Callable[..., _CC], *attrs: _CompositeAttrType[Any], group: Optional[str] = ..., deferred: bool = ..., raiseload: bool = ..., comparator_factory: Optional[Type[Composite.Comparator[_T]]] = ..., active_history: bool = ..., init: Union[_NoArg, bool] = ..., repr: Union[_NoArg, bool] = ..., default: Optional[Any] = ..., default_factory: Union[_NoArg, Callable[[], _T]] = ..., compare: Union[_NoArg, bool] = ..., kw_only: Union[_NoArg, bool] = ..., info: Optional[_InfoType] = ..., doc: Optional[str] = ..., **__kw: Any) -> Composite[_CC]: ...
def with_loader_criteria(entity_or_base: _EntityType[Any], where_criteria: _ColumnExpressionArgument[bool], loader_only: bool = ..., include_aliases: bool = ..., propagate_to_loaders: bool = ..., track_closure_variables: bool = ...) -> LoaderCriteriaOption: ...
def relationship(argument: Optional[_RelationshipArgumentType[Any]] = ..., secondary: Optional[_RelationshipSecondaryArgument] = ..., *, uselist: Optional[bool] = ..., collection_class: Optional[Union[Type[Collection[Any]], Callable[[], Collection[Any]]]] = ..., primaryjoin: Optional[_RelationshipJoinConditionArgument] = ..., secondaryjoin: Optional[_RelationshipJoinConditionArgument] = ..., back_populates: Optional[str] = ..., order_by: _ORMOrderByArgument = ..., backref: Optional[ORMBackrefArgument] = ..., overlaps: Optional[str] = ..., post_update: bool = ..., cascade: str = ..., viewonly: bool = ..., init: Union[_NoArg, bool] = ..., repr: Union[_NoArg, bool] = ..., default: Union[_NoArg, _T] = ..., default_factory: Union[_NoArg, Callable[[], _T]] = ..., compare: Union[_NoArg, bool] = ..., kw_only: Union[_NoArg, bool] = ..., lazy: _LazyLoadArgumentType = ..., passive_deletes: Union[Literal['all'], bool] = ..., passive_updates: bool = ..., active_history: bool = ..., enable_typechecks: bool = ..., foreign_keys: Optional[_ORMColCollectionArgument] = ..., remote_side: Optional[_ORMColCollectionArgument] = ..., join_depth: Optional[int] = ..., comparator_factory: Optional[Type[RelationshipProperty.Comparator[Any]]] = ..., single_parent: bool = ..., innerjoin: bool = ..., distinct_target_key: Optional[bool] = ..., load_on_pending: bool = ..., query_class: Optional[Type[Query[Any]]] = ..., info: Optional[_InfoType] = ..., omit_join: Literal[None, False] = ..., sync_backref: Optional[bool] = ..., **kw: Any) -> Relationship[Any]: ...
def synonym(name: str, *, map_column: Optional[bool] = ..., descriptor: Optional[Any] = ..., comparator_factory: Optional[Type[PropComparator[_T]]] = ..., init: Union[_NoArg, bool] = ..., repr: Union[_NoArg, bool] = ..., default: Union[_NoArg, _T] = ..., default_factory: Union[_NoArg, Callable[[], _T]] = ..., compare: Union[_NoArg, bool] = ..., kw_only: Union[_NoArg, bool] = ..., info: Optional[_InfoType] = ..., doc: Optional[str] = ...) -> Synonym[Any]: ...
def create_session(bind: Optional[_SessionBind] = ..., **kwargs: Any) -> Session: ...
def dynamic_loader(argument: Optional[_RelationshipArgumentType[Any]] = ..., **kw: Any) -> RelationshipProperty[Any]: ...
def backref(name: str, **kwargs: Any) -> ORMBackrefArgument: ...
def deferred(column: _ORMColumnExprArgument[_T], *additional_columns: _ORMColumnExprArgument[Any], group: Optional[str] = ..., raiseload: bool = ..., comparator_factory: Optional[Type[PropComparator[_T]]] = ..., init: Union[_NoArg, bool] = ..., repr: Union[_NoArg, bool] = ..., default: Optional[Any] = ..., default_factory: Union[_NoArg, Callable[[], _T]] = ..., compare: Union[_NoArg, bool] = ..., kw_only: Union[_NoArg, bool] = ..., active_history: bool = ..., expire_on_flush: bool = ..., info: Optional[_InfoType] = ..., doc: Optional[str] = ...) -> MappedSQLExpression[_T]: ...
def query_expression(default_expr: _ORMColumnExprArgument[_T] = ..., *, repr: Union[_NoArg, bool] = ..., compare: Union[_NoArg, bool] = ..., expire_on_flush: bool = ..., info: Optional[_InfoType] = ..., doc: Optional[str] = ...) -> MappedSQLExpression[_T]: ...
def clear_mappers() -> None: ...

AliasedType: Incomplete

@overload
def aliased(element: Type[_O], alias: Optional[FromClause] = ..., name: Optional[str] = ..., flat: bool = ..., adapt_on_names: bool = ...) -> AliasedType[_O]: ...
@overload
def aliased(element: Union[AliasedClass[_O], Mapper[_O], AliasedInsp[_O]], alias: Optional[FromClause] = ..., name: Optional[str] = ..., flat: bool = ..., adapt_on_names: bool = ...) -> AliasedClass[_O]: ...
@overload
def aliased(element: FromClause, alias: None = ..., name: Optional[str] = ..., flat: bool = ..., adapt_on_names: bool = ...) -> FromClause: ...
def with_polymorphic(base: Union[Type[_O], Mapper[_O]], classes: Union[Literal['*'], Iterable[Type[Any]]], selectable: Union[Literal[False, None], FromClause] = ..., flat: bool = ..., polymorphic_on: Optional[ColumnElement[Any]] = ..., aliased: bool = ..., innerjoin: bool = ..., adapt_on_names: bool = ..., _use_mapper_path: bool = ...) -> AliasedClass[_O]: ...
def join(left: _FromClauseArgument, right: _FromClauseArgument, onclause: Optional[_OnClauseArgument] = ..., isouter: bool = ..., full: bool = ...) -> _ORMJoin: ...
def outerjoin(left: _FromClauseArgument, right: _FromClauseArgument, onclause: Optional[_OnClauseArgument] = ..., full: bool = ...) -> _ORMJoin: ...
