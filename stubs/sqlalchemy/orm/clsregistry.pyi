import weakref
from . import attributes as attributes, interfaces as interfaces
from .. import exc as exc, inspection as inspection, util as util
from ..sql.schema import MetaData as MetaData, Table as Table
from ..util.typing import CallableReference as CallableReference
from .descriptor_props import SynonymProperty as SynonymProperty
from .properties import ColumnProperty as ColumnProperty
from .relationships import RelationshipProperty as RelationshipProperty
from .util import class_mapper as class_mapper
from _typeshed import Incomplete
from typing import Any, Callable, Dict, Generator, Iterable, List, Mapping, Optional, Set, Type, Union

def add_class(classname: str, cls: Type[_T], decl_class_registry: _ClsRegistryType) -> None: ...
def remove_class(classname: str, cls: Type[Any], decl_class_registry: _ClsRegistryType) -> None: ...

class ClsRegistryToken: ...

class _MultipleClassMarker(ClsRegistryToken):
    contents: Set[weakref.ref[Type[Any]]]
    on_remove: CallableReference[Optional[Callable[[], None]]]
    def __init__(self, classes: Iterable[Type[Any]], on_remove: Optional[Callable[[], None]] = ...) -> None: ...
    def remove_item(self, cls: Type[Any]) -> None: ...
    def __iter__(self) -> Generator[Optional[Type[Any]], None, None]: ...
    def attempt_get(self, path: List[str], key: str) -> Type[Any]: ...
    def add_item(self, item: Type[Any]) -> None: ...

class _ModuleMarker(ClsRegistryToken):
    parent: Optional[_ModuleMarker]
    contents: Dict[str, Union[_ModuleMarker, _MultipleClassMarker]]
    mod_ns: _ModNS
    path: List[str]
    name: Incomplete
    def __init__(self, name: str, parent: Optional[_ModuleMarker]) -> None: ...
    def __contains__(self, name: str) -> bool: ...
    def __getitem__(self, name: str) -> ClsRegistryToken: ...
    def resolve_attr(self, key: str) -> Union[_ModNS, Type[Any]]: ...
    def get_module(self, name: str) -> _ModuleMarker: ...
    def add_class(self, name: str, cls: Type[Any]) -> None: ...
    def remove_class(self, name: str, cls: Type[Any]) -> None: ...

class _ModNS:
    def __init__(self, parent: _ModuleMarker) -> None: ...
    def __getattr__(self, key: str) -> Union[_ModNS, Type[Any]]: ...

class _GetColumns:
    cls: Type[Any]
    def __init__(self, cls: Type[Any]) -> None: ...
    def __getattr__(self, key: str) -> Any: ...

class _GetTable:
    key: str
    metadata: MetaData
    def __init__(self, key: str, metadata: MetaData) -> None: ...
    def __getattr__(self, key: str) -> Table: ...

class _class_resolver:
    cls: Type[Any]
    prop: RelationshipProperty[Any]
    fallback: Mapping[str, Any]
    arg: str
    favor_tables: bool
    def __init__(self, cls: Type[Any], prop: RelationshipProperty[Any], fallback: Mapping[str, Any], arg: str, favor_tables: bool = ...) -> None: ...
    def __call__(self) -> Any: ...
