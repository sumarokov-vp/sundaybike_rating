import weakref
from . import instrumentation as instrumentation, interfaces as interfaces, mapperlib as mapperlib
from .. import event as event, exc as exc, util as util
from ..engine import Connection as Connection
from ..event import EventTarget as EventTarget
from ..event.registry import _ET, _EventKey
from ..orm.collections import CollectionAdapter as CollectionAdapter
from ..orm.context import QueryContext as QueryContext
from ..orm.decl_api import DeclarativeAttributeIntercept as DeclarativeAttributeIntercept, DeclarativeMeta as DeclarativeMeta
from ..orm.mapper import Mapper as Mapper
from ..orm.state import InstanceState as InstanceState
from ..util.compat import inspect_getfullargspec as inspect_getfullargspec
from ._typing import _InstanceDict, _InternalEntityType, _O, _T
from .attributes import Event as Event, QueryableAttribute as QueryableAttribute
from .base import EventConstants as EventConstants, NO_KEY as NO_KEY
from .instrumentation import ClassManager as ClassManager, InstrumentationFactory as InstrumentationFactory
from .query import BulkDelete as BulkDelete, BulkUpdate as BulkUpdate, Query as Query
from .scoping import scoped_session as scoped_session
from .session import ORMExecuteState as ORMExecuteState, Session as Session, SessionTransaction as SessionTransaction, sessionmaker as sessionmaker
from .unitofwork import UOWTransaction as UOWTransaction
from _typeshed import Incomplete
from typing import Any, Collection, Dict, Generic, Iterable, Optional, Sequence, Type, Union

class InstrumentationEvents(event.Events[InstrumentationFactory]):
    def class_instrument(self, cls: ClassManager[_O]) -> None: ...
    def class_uninstrument(self, cls: ClassManager[_O]) -> None: ...
    def attribute_instrument(self, cls: ClassManager[_O], key: _KT, inst: _O) -> None: ...

class _InstrumentationEventsHold:
    class_: Incomplete
    def __init__(self, class_: type) -> None: ...
    dispatch: Incomplete

class InstanceEvents(event.Events[ClassManager[Any]]):
    def first_init(self, manager: ClassManager[_O], cls: Type[_O]) -> None: ...
    def init(self, target: _O, args: Any, kwargs: Any) -> None: ...
    def init_failure(self, target: _O, args: Any, kwargs: Any) -> None: ...
    def load(self, target: _O, context: QueryContext) -> None: ...
    def refresh(self, target: _O, context: QueryContext, attrs: Optional[Iterable[str]]) -> None: ...
    def refresh_flush(self, target: _O, flush_context: UOWTransaction, attrs: Optional[Iterable[str]]) -> None: ...
    def expire(self, target: _O, attrs: Optional[Iterable[str]]) -> None: ...
    def pickle(self, target: _O, state_dict: _InstanceDict) -> None: ...
    def unpickle(self, target: _O, state_dict: _InstanceDict) -> None: ...

class _EventsHold(event.RefCollection[_ET]):
    all_holds: weakref.WeakKeyDictionary[Any, Any]
    class_: Incomplete
    def __init__(self, class_: Union[DeclarativeAttributeIntercept, DeclarativeMeta, type]) -> None: ...
    class HoldEvents(Generic[_ET2]): ...
    def remove(self, event_key: _EventKey[_ET]) -> None: ...
    @classmethod
    def populate(cls, class_: Union[DeclarativeAttributeIntercept, DeclarativeMeta, type], subject: Union[ClassManager[_O], Mapper[_O]]) -> None: ...

class _InstanceEventsHold(_EventsHold[_ET]):
    all_holds: weakref.WeakKeyDictionary[Any, Any]
    def resolve(self, class_: Type[_O]) -> Optional[ClassManager[_O]]: ...
    class HoldInstanceEvents(_EventsHold.HoldEvents[_ET], InstanceEvents): ...
    dispatch: Incomplete

class MapperEvents(event.Events[mapperlib.Mapper[Any]]):
    def instrument_class(self, mapper: Mapper[_O], class_: Type[_O]) -> None: ...
    def after_mapper_constructed(self, mapper: Mapper[_O], class_: Type[_O]) -> None: ...
    def before_mapper_configured(self, mapper: Mapper[_O], class_: Type[_O]) -> None: ...
    def mapper_configured(self, mapper: Mapper[_O], class_: Type[_O]) -> None: ...
    def before_configured(self) -> None: ...
    def after_configured(self) -> None: ...
    def before_insert(self, mapper: Mapper[_O], connection: Connection, target: _O) -> None: ...
    def after_insert(self, mapper: Mapper[_O], connection: Connection, target: _O) -> None: ...
    def before_update(self, mapper: Mapper[_O], connection: Connection, target: _O) -> None: ...
    def after_update(self, mapper: Mapper[_O], connection: Connection, target: _O) -> None: ...
    def before_delete(self, mapper: Mapper[_O], connection: Connection, target: _O) -> None: ...
    def after_delete(self, mapper: Mapper[_O], connection: Connection, target: _O) -> None: ...

class _MapperEventsHold(_EventsHold[_ET]):
    all_holds: Incomplete
    def resolve(self, class_: Union[Type[_T], _InternalEntityType[_T]]) -> Optional[Mapper[_T]]: ...
    class HoldMapperEvents(_EventsHold.HoldEvents[_ET], MapperEvents): ...
    dispatch: Incomplete

class SessionEvents(event.Events[Session]):
    def do_orm_execute(self, orm_execute_state: ORMExecuteState) -> None: ...
    def after_transaction_create(self, session: Session, transaction: SessionTransaction) -> None: ...
    def after_transaction_end(self, session: Session, transaction: SessionTransaction) -> None: ...
    def before_commit(self, session: Session) -> None: ...
    def after_commit(self, session: Session) -> None: ...
    def after_rollback(self, session: Session) -> None: ...
    def after_soft_rollback(self, session: Session, previous_transaction: SessionTransaction) -> None: ...
    def before_flush(self, session: Session, flush_context: UOWTransaction, instances: Optional[Sequence[_O]]) -> None: ...
    def after_flush(self, session: Session, flush_context: UOWTransaction) -> None: ...
    def after_flush_postexec(self, session: Session, flush_context: UOWTransaction) -> None: ...
    def after_begin(self, session: Session, transaction: SessionTransaction, connection: Connection) -> None: ...
    def before_attach(self, session: Session, instance: _O) -> None: ...
    def after_attach(self, session: Session, instance: _O) -> None: ...
    def after_bulk_update(self, update_context: _O) -> None: ...
    def after_bulk_delete(self, delete_context: _O) -> None: ...
    def transient_to_pending(self, session: Session, instance: _O) -> None: ...
    def pending_to_transient(self, session: Session, instance: _O) -> None: ...
    def persistent_to_transient(self, session: Session, instance: _O) -> None: ...
    def pending_to_persistent(self, session: Session, instance: _O) -> None: ...
    def detached_to_persistent(self, session: Session, instance: _O) -> None: ...
    def loaded_as_persistent(self, session: Session, instance: _O) -> None: ...
    def persistent_to_deleted(self, session: Session, instance: _O) -> None: ...
    def deleted_to_persistent(self, session: Session, instance: _O) -> None: ...
    def deleted_to_detached(self, session: Session, instance: _O) -> None: ...
    def persistent_to_detached(self, session: Session, instance: _O) -> None: ...

class AttributeEvents(event.Events[QueryableAttribute[Any]]):
    def append(self, target: _O, value: _T, initiator: Event, *, key: EventConstants = ...) -> Optional[_T]: ...
    def append_wo_mutation(self, target: _O, value: _T, initiator: Event, *, key: EventConstants = ...) -> None: ...
    def bulk_replace(self, target: _O, values: Iterable[_T], initiator: Event, *, keys: Optional[Iterable[EventConstants]] = ...) -> None: ...
    def remove(self, target: _O, value: _T, initiator: Event, *, key: EventConstants = ...) -> None: ...
    def set(self, target: _O, value: _T, oldvalue: _T, initiator: Event) -> None: ...
    def init_scalar(self, target: _O, value: _T, dict_: Dict[Any, Any]) -> None: ...
    def init_collection(self, target: _O, collection: Type[Collection[Any]], collection_adapter: CollectionAdapter) -> None: ...
    def dispose_collection(self, target: _O, collection: Collection[Any], collection_adapter: CollectionAdapter) -> None: ...
    def modified(self, target: _O, initiator: Event) -> None: ...

class QueryEvents(event.Events[Query[Any]]):
    def before_compile(self, query: Query[Any]) -> None: ...
    def before_compile_update(self, query: Query[Any], update_context: BulkUpdate) -> None: ...
    def before_compile_delete(self, query: Query[Any], delete_context: BulkDelete) -> None: ...
