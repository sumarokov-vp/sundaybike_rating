from . import attributes as attributes, instrumentation as instrumentation, loading as loading, properties as properties
from .. import event as event, inspection as inspection, log as log, schema as schema, sql as sql, util as util
from ..engine import Row as Row, RowMapping as RowMapping
from ..event import EventTarget as EventTarget, dispatcher as dispatcher
from ..sql import TableClause as TableClause, coercions as coercions, expression as expression, operators as operators, roles as roles, visitors as visitors
from ..sql._typing import _ColumnExpressionArgument
from ..sql.base import ReadOnlyColumnCollection as ReadOnlyColumnCollection
from ..sql.cache_key import MemoizedHasCacheKey as MemoizedHasCacheKey
from ..sql.elements import ColumnClause as ColumnClause, ColumnElement as ColumnElement, KeyedColumnElement as KeyedColumnElement
from ..sql.schema import Column as Column, Table as Table
from ..sql.selectable import FromClause as FromClause, LABEL_STYLE_TABLENAME_PLUS_COL as LABEL_STYLE_TABLENAME_PLUS_COL
from ..util import HasMemoized as HasMemoized, HasMemoized_ro_memoized_attribute as HasMemoized_ro_memoized_attribute, OrderedSet as OrderedSet
from ..util.typing import Literal as Literal
from ._typing import _IdentityKeyType, _InstanceDict, _O, _ORMColumnExprArgument, _RegistryType
from .base import PassiveFlag as PassiveFlag, state_str as state_str
from .decl_api import registry as registry
from .dependency import DependencyProcessor as DependencyProcessor
from .descriptor_props import CompositeProperty as CompositeProperty, SynonymProperty as SynonymProperty
from .events import MapperEvents as MapperEvents
from .instrumentation import ClassManager as ClassManager
from .interfaces import EXT_SKIP as EXT_SKIP, InspectionAttr as InspectionAttr, MapperProperty as MapperProperty, ORMEntityColumnsClauseRole as ORMEntityColumnsClauseRole, ORMFromClauseRole as ORMFromClauseRole, StrategizedProperty as StrategizedProperty
from .path_registry import CachingEntityRegistry as CachingEntityRegistry, PathRegistry as PathRegistry
from .properties import ColumnProperty as ColumnProperty
from .relationships import RelationshipProperty as RelationshipProperty
from .state import InstanceState as InstanceState
from .util import ORMAdapter as ORMAdapter
from _typeshed import Incomplete
from typing import Any, Callable, Dict, Generic, Iterable, Iterator, Mapping, Optional, Sequence, Tuple, Type, Union

NO_ATTRIBUTE: Incomplete

class Mapper(ORMFromClauseRole, ORMEntityColumnsClauseRole[_O], MemoizedHasCacheKey, InspectionAttr, log.Identified, inspection.Inspectable['Mapper[_O]'], EventTarget, Generic[_O]):
    dispatch: dispatcher[Mapper[_O]]
    class_: Incomplete
    non_primary: Incomplete
    always_refresh: Incomplete
    version_id_prop: Incomplete
    version_id_col: Incomplete
    version_id_generator: bool
    concrete: Incomplete
    single: bool
    inherits: Incomplete
    local_table: Incomplete
    inherit_condition: Incomplete
    inherit_foreign_keys: Incomplete
    batch: Incomplete
    eager_defaults: Incomplete
    column_prefix: Incomplete
    polymorphic_on: Incomplete
    polymorphic_abstract: Incomplete
    validators: Incomplete
    passive_updates: Incomplete
    passive_deletes: Incomplete
    legacy_is_orphan: Incomplete
    allow_partial_pks: Incomplete
    confirm_deleted_rows: bool
    polymorphic_load: Incomplete
    polymorphic_identity: Incomplete
    polymorphic_map: Incomplete
    include_properties: Incomplete
    exclude_properties: Incomplete
    def __init__(self, class_: Type[_O], local_table: Optional[FromClause] = ..., properties: Optional[Mapping[str, MapperProperty[Any]]] = ..., primary_key: Optional[Iterable[_ORMColumnExprArgument[Any]]] = ..., non_primary: bool = ..., inherits: Optional[Union[Mapper[Any], Type[Any]]] = ..., inherit_condition: Optional[_ColumnExpressionArgument[bool]] = ..., inherit_foreign_keys: Optional[Sequence[_ORMColumnExprArgument[Any]]] = ..., always_refresh: bool = ..., version_id_col: Optional[_ORMColumnExprArgument[Any]] = ..., version_id_generator: Optional[Union[Literal[False], Callable[[Any], Any]]] = ..., polymorphic_on: Optional[Union[_ORMColumnExprArgument[Any], str, MapperProperty[Any]]] = ..., _polymorphic_map: Optional[Dict[Any, Mapper[Any]]] = ..., polymorphic_identity: Optional[Any] = ..., concrete: bool = ..., with_polymorphic: Optional[_WithPolymorphicArg] = ..., polymorphic_abstract: bool = ..., polymorphic_load: Optional[Literal['selectin', 'inline']] = ..., allow_partial_pks: bool = ..., batch: bool = ..., column_prefix: Optional[str] = ..., include_properties: Optional[Sequence[str]] = ..., exclude_properties: Optional[Sequence[str]] = ..., passive_updates: bool = ..., passive_deletes: bool = ..., confirm_deleted_rows: bool = ..., eager_defaults: Literal[True, False, 'auto'] = ..., legacy_is_orphan: bool = ..., _compiled_cache_size: int = ...) -> None: ...
    is_mapper: bool
    represents_outer_join: bool
    registry: _RegistryType
    @property
    def mapper(self) -> Mapper[_O]: ...
    @property
    def entity(self): ...
    tables: Sequence[TableClause]
    with_polymorphic: Optional[Tuple[Union[Literal['*'], Sequence[Union[Mapper[Any], Type[Any]]]], Optional[FromClause]]]
    persist_selectable: FromClause
    configured: bool
    primary_key: Tuple[Column[Any], ...]
    class_manager: ClassManager[_O]
    base_mapper: Mapper[Any]
    columns: ReadOnlyColumnCollection[str, Column[Any]]
    c: ReadOnlyColumnCollection[str, Column[Any]]
    def mapped_table(self): ...
    def add_properties(self, dict_of_properties) -> None: ...
    def add_property(self, key: str, prop: Union[Column[Any], MapperProperty[Any]]) -> None: ...
    def has_property(self, key: str) -> bool: ...
    def get_property(self, key: str, _configure_mappers: bool = ...) -> MapperProperty[Any]: ...
    def get_property_by_column(self, column: ColumnElement[_T]) -> MapperProperty[_T]: ...
    @property
    def iterate_properties(self): ...
    with_polymorphic_mappers: Incomplete
    def __clause_element__(self): ...
    def select_identity_token(self): ...
    @property
    def selectable(self) -> FromClause: ...
    def attrs(self) -> util.ReadOnlyProperties[MapperProperty[Any]]: ...
    def all_orm_descriptors(self) -> util.ReadOnlyProperties[InspectionAttr]: ...
    def synonyms(self) -> util.ReadOnlyProperties[SynonymProperty[Any]]: ...
    @property
    def entity_namespace(self): ...
    def column_attrs(self) -> util.ReadOnlyProperties[ColumnProperty[Any]]: ...
    def relationships(self) -> util.ReadOnlyProperties[RelationshipProperty[Any]]: ...
    def composites(self) -> util.ReadOnlyProperties[CompositeProperty[Any]]: ...
    def common_parent(self, other: Mapper[Any]) -> bool: ...
    def is_sibling(self, other: Mapper[Any]) -> bool: ...
    def isa(self, other: Mapper[Any]) -> bool: ...
    def iterate_to_root(self) -> Iterator[Mapper[Any]]: ...
    def self_and_descendants(self) -> Sequence[Mapper[Any]]: ...
    def polymorphic_iterator(self) -> Iterator[Mapper[Any]]: ...
    def primary_mapper(self) -> Mapper[Any]: ...
    @property
    def primary_base_mapper(self) -> Mapper[Any]: ...
    def identity_key_from_row(self, row: Optional[Union[Row[Any], RowMapping]], identity_token: Optional[Any] = ..., adapter: Optional[ORMAdapter] = ...) -> _IdentityKeyType[_O]: ...
    def identity_key_from_primary_key(self, primary_key: Tuple[Any, ...], identity_token: Optional[Any] = ...) -> _IdentityKeyType[_O]: ...
    def identity_key_from_instance(self, instance: _O) -> _IdentityKeyType[_O]: ...
    def primary_key_from_instance(self, instance: _O) -> Tuple[Any, ...]: ...
    def cascade_iterator(self, type_: str, state: InstanceState[_O], halt_on: Optional[Callable[[InstanceState[Any]], bool]] = ...) -> Iterator[Tuple[object, Mapper[Any], InstanceState[Any], _InstanceDict]]: ...

class _OptGetColumnsNotAvailable(Exception): ...

def configure_mappers() -> None: ...
def reconstructor(fn): ...
def validates(*names: str, include_removes: bool = ..., include_backrefs: bool = ...) -> Callable[[_Fn], _Fn]: ...

class _ColumnMapping(Dict['ColumnElement[Any]', 'MapperProperty[Any]']):
    mapper: Incomplete
    def __init__(self, mapper) -> None: ...
    def __missing__(self, column) -> None: ...
