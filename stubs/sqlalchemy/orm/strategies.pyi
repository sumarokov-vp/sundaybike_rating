from . import attributes as attributes, interfaces as interfaces, loading as loading, path_registry as path_registry, properties as properties, query as query, relationships as relationships, unitofwork as unitofwork
from .. import event as event, inspect as inspect, log as log, sql as sql, util as util
from ..sql import visitors as visitors
from ..sql.elements import ColumnElement as ColumnElement
from ..sql.selectable import LABEL_STYLE_TABLENAME_PLUS_COL as LABEL_STYLE_TABLENAME_PLUS_COL, Select as Select
from .base import ATTR_WAS_SET as ATTR_WAS_SET, LoaderCallableStatus as LoaderCallableStatus, PASSIVE_OFF as PASSIVE_OFF, PassiveFlag as PassiveFlag
from .context import ORMCompileState as ORMCompileState, ORMSelectCompileState as ORMSelectCompileState, QueryContext as QueryContext
from .interfaces import LoaderStrategy as LoaderStrategy, StrategizedProperty as StrategizedProperty
from .relationships import RelationshipProperty as RelationshipProperty
from .state import InstanceState as InstanceState
from .strategy_options import Load as Load
from .util import AliasedClass as AliasedClass
from _typeshed import Incomplete
from typing import Any, NamedTuple, Tuple

class UninstrumentedColumnLoader(LoaderStrategy):
    columns: Incomplete
    def __init__(self, parent, strategy_key) -> None: ...
    def setup_query(self, compile_state, query_entity, path, loadopt, adapter, column_collection: Incomplete | None = ..., **kwargs) -> None: ...
    def create_row_processor(self, context, query_entity, path, loadopt, mapper, result, adapter, populators) -> None: ...

class ColumnLoader(LoaderStrategy):
    columns: Incomplete
    is_composite: Incomplete
    def __init__(self, parent, strategy_key) -> None: ...
    def setup_query(self, compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators, check_for_adapt: bool = ..., **kwargs) -> None: ...
    is_class_level: bool
    def init_class_attribute(self, mapper) -> None: ...
    def create_row_processor(self, context, query_entity, path, loadopt, mapper, result, adapter, populators) -> None: ...

class ExpressionColumnLoader(ColumnLoader):
    def __init__(self, parent, strategy_key) -> None: ...
    def setup_query(self, compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators, **kwargs) -> None: ...
    def create_row_processor(self, context, query_entity, path, loadopt, mapper, result, adapter, populators) -> None: ...
    is_class_level: bool
    def init_class_attribute(self, mapper) -> None: ...

class DeferredColumnLoader(LoaderStrategy):
    raiseload: Incomplete
    columns: Incomplete
    group: Incomplete
    def __init__(self, parent, strategy_key) -> None: ...
    def create_row_processor(self, context, query_entity, path, loadopt, mapper, result, adapter, populators) -> None: ...
    is_class_level: bool
    def init_class_attribute(self, mapper) -> None: ...
    def setup_query(self, compile_state, query_entity, path, loadopt, adapter, column_collection, memoized_populators, only_load_props: Incomplete | None = ..., **kw) -> None: ...

class LoadDeferredColumns:
    key: Incomplete
    raiseload: Incomplete
    def __init__(self, key: str, raiseload: bool = ...) -> None: ...
    def __call__(self, state, passive=...): ...

class AbstractRelationshipLoader(LoaderStrategy):
    mapper: Incomplete
    entity: Incomplete
    target: Incomplete
    uselist: Incomplete
    def __init__(self, parent, strategy_key) -> None: ...

class DoNothingLoader(LoaderStrategy): ...

class NoLoader(AbstractRelationshipLoader):
    is_class_level: bool
    def init_class_attribute(self, mapper) -> None: ...
    def create_row_processor(self, context, query_entity, path, loadopt, mapper, result, adapter, populators) -> None: ...

class LazyLoader(AbstractRelationshipLoader, util.MemoizedSlots, log.Identified):
    parent_property: RelationshipProperty[Any]
    is_aliased_class: Incomplete
    use_get: Incomplete
    def __init__(self, parent: RelationshipProperty[Any], strategy_key: Tuple[Any, ...]) -> None: ...
    is_class_level: bool
    def init_class_attribute(self, mapper) -> None: ...
    def create_row_processor(self, context, query_entity, path, loadopt, mapper, result, adapter, populators): ...

class LoadLazyAttribute:
    key: Incomplete
    strategy_key: Incomplete
    loadopt: Incomplete
    extra_criteria: Incomplete
    def __init__(self, key, initiating_strategy, loadopt, extra_criteria) -> None: ...
    def __call__(self, state, passive=...): ...

class PostLoader(AbstractRelationshipLoader): ...

class ImmediateLoader(PostLoader):
    join_depth: Incomplete
    def __init__(self, parent, strategy_key) -> None: ...
    def init_class_attribute(self, mapper) -> None: ...
    def create_row_processor(self, context, query_entity, path, loadopt, mapper, result, adapter, populators) -> None: ...

class SubqueryLoader(PostLoader):
    join_depth: Incomplete
    def __init__(self, parent, strategy_key) -> None: ...
    def init_class_attribute(self, mapper) -> None: ...
    class _SubqCollections:
        session: Incomplete
        execution_options: Incomplete
        load_options: Incomplete
        params: Incomplete
        subq: Incomplete
        def __init__(self, context, subq) -> None: ...
        def get(self, key, default): ...
        def loader(self, state, dict_, row) -> None: ...
    def create_row_processor(self, context, query_entity, path, loadopt, mapper, result, adapter, populators): ...

class JoinedLoader(AbstractRelationshipLoader):
    join_depth: Incomplete
    def __init__(self, parent, strategy_key) -> None: ...
    def init_class_attribute(self, mapper) -> None: ...
    def setup_query(self, compile_state, query_entity, path, loadopt, adapter, column_collection: Incomplete | None = ..., parentmapper: Incomplete | None = ..., chained_from_outerjoin: bool = ..., **kwargs) -> None: ...
    def create_row_processor(self, context, query_entity, path, loadopt, mapper, result, adapter, populators) -> None: ...

class SelectInLoader(PostLoader, util.MemoizedSlots):

    class query_info(NamedTuple):
        load_only_child: Incomplete
        load_with_join: Incomplete
        in_expr: Incomplete
        pk_cols: Incomplete
        zero_idx: Incomplete
        child_lookup_cols: Incomplete
    join_depth: Incomplete
    omit_join: Incomplete
    def __init__(self, parent, strategy_key) -> None: ...
    def init_class_attribute(self, mapper) -> None: ...
    def create_row_processor(self, context, query_entity, path, loadopt, mapper, result, adapter, populators): ...

def single_parent_validator(desc, prop): ...
