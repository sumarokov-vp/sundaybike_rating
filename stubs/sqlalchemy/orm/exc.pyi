from .. import exc as sa_exc, util as util
from ..exc import MultipleResultsFound as MultipleResultsFound, NoResultFound as NoResultFound
from .interfaces import LoaderStrategy as LoaderStrategy, MapperProperty as MapperProperty
from .state import InstanceState as InstanceState
from _typeshed import Incomplete
from typing import Any, Optional, Tuple, Type

NO_STATE: Incomplete

class StaleDataError(sa_exc.SQLAlchemyError): ...
ConcurrentModificationError = StaleDataError

class FlushError(sa_exc.SQLAlchemyError): ...
class UnmappedError(sa_exc.InvalidRequestError): ...
class ObjectDereferencedError(sa_exc.SQLAlchemyError): ...

class DetachedInstanceError(sa_exc.SQLAlchemyError):
    code: str

class UnmappedInstanceError(UnmappedError):
    def __init__(self, obj: object, msg: Optional[str] = ...) -> None: ...
    def __reduce__(self) -> Any: ...

class UnmappedClassError(UnmappedError):
    def __init__(self, cls: Type[_T], msg: Optional[str] = ...) -> None: ...
    def __reduce__(self) -> Any: ...

class ObjectDeletedError(sa_exc.InvalidRequestError):
    def __init__(self, state: InstanceState[Any], msg: Optional[str] = ...) -> None: ...
    def __reduce__(self) -> Any: ...

class UnmappedColumnError(sa_exc.InvalidRequestError): ...

class LoaderStrategyException(sa_exc.InvalidRequestError):
    def __init__(self, applied_to_property_type: Type[Any], requesting_property: MapperProperty[Any], applies_to: Optional[Type[MapperProperty[Any]]], actual_strategy_type: Optional[Type[LoaderStrategy]], strategy_key: Tuple[Any, ...]) -> None: ...
