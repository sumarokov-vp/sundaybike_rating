from ._typing import _IdentityKeyType
from .state import InstanceState as InstanceState
from typing import Any, Iterable, Iterator, List, Optional, Tuple

class IdentityMap:
    def __init__(self) -> None: ...
    def all_states(self) -> List[InstanceState[Any]]: ...
    def contains_state(self, state: InstanceState[Any]) -> bool: ...
    def __contains__(self, key: _IdentityKeyType[Any]) -> bool: ...
    def safe_discard(self, state: InstanceState[Any]) -> None: ...
    def __getitem__(self, key: _IdentityKeyType[_O]) -> _O: ...
    def get(self, key: _IdentityKeyType[_O], default: Optional[_O] = ...) -> Optional[_O]: ...
    def fast_get_state(self, key: _IdentityKeyType[_O]) -> Optional[InstanceState[_O]]: ...
    def keys(self) -> Iterable[_IdentityKeyType[Any]]: ...
    def values(self) -> Iterable[object]: ...
    def replace(self, state: InstanceState[_O]) -> Optional[InstanceState[_O]]: ...
    def add(self, state: InstanceState[Any]) -> bool: ...
    def check_modified(self) -> bool: ...
    def has_key(self, key: _IdentityKeyType[Any]) -> bool: ...
    def __len__(self) -> int: ...

class WeakInstanceDict(IdentityMap):
    def __getitem__(self, key: _IdentityKeyType[_O]) -> _O: ...
    def __contains__(self, key: _IdentityKeyType[Any]) -> bool: ...
    def contains_state(self, state: InstanceState[Any]) -> bool: ...
    def replace(self, state: InstanceState[Any]) -> Optional[InstanceState[Any]]: ...
    def add(self, state: InstanceState[Any]) -> bool: ...
    def fast_get_state(self, key: _IdentityKeyType[_O]) -> Optional[InstanceState[_O]]: ...
    def get(self, key: _IdentityKeyType[_O], default: Optional[_O] = ...) -> Optional[_O]: ...
    def items(self) -> List[Tuple[_IdentityKeyType[Any], InstanceState[Any]]]: ...
    def values(self) -> List[object]: ...
    def __iter__(self) -> Iterator[_IdentityKeyType[Any]]: ...
    def all_states(self) -> List[InstanceState[Any]]: ...
    def discard(self, state: InstanceState[Any]) -> None: ...
    def safe_discard(self, state: InstanceState[Any]) -> None: ...
