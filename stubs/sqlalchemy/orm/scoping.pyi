from ..engine import Connection, CursorResult, Engine, Result, Row, RowMapping
from ..engine.interfaces import CoreExecuteOptionsParameter, _CoreAnyExecuteParams, _CoreSingleExecuteParams
from ..engine.result import ScalarResult
from ..sql._typing import _ColumnsClauseArgument, _T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _TypedColumnClauseArgument as _TCCA
from ..sql.base import Executable
from ..sql.dml import UpdateBase
from ..sql.elements import ClauseElement
from ..sql.roles import TypedColumnsClauseRole
from ..sql.selectable import ForUpdateParameter, TypedReturnsRows
from ..util import ScopedRegistry
from ..util.typing import Protocol
from ._typing import OrmExecuteOptionsParameter, _EntityType, _IdentityKeyType
from .identity import IdentityMap
from .interfaces import ORMOption
from .mapper import Mapper
from .query import Query, RowReturningQuery
from .session import Session, SessionTransaction, _BindArguments, _EntityBindKey, _PKIdentityArgument, _S, _SessionBind, sessionmaker
from typing import Any, Callable, Dict, Generic, Iterable, Iterator, Optional, Sequence, Tuple, Type, Union, overload

class QueryPropertyDescriptor(Protocol):
    def __get__(self, instance: Any, owner: Type[_T]) -> Query[_T]: ...

class scoped_session(Generic[_S]):
    session_factory: sessionmaker[_S]
    registry: ScopedRegistry[_S]
    def __init__(self, session_factory: sessionmaker[_S], scopefunc: Optional[Callable[[], Any]] = ...) -> None: ...
    def __call__(self, **kw: Any) -> _S: ...
    def configure(self, **kwargs: Any) -> None: ...
    def remove(self) -> None: ...
    def query_property(self, query_cls: Optional[Type[Query[_T]]] = ...) -> QueryPropertyDescriptor: ...
    def __contains__(self, instance: object) -> bool: ...
    def __iter__(self) -> Iterator[object]: ...
    def add(self, instance: object, _warn: bool = ...) -> None: ...
    def add_all(self, instances: Iterable[object]) -> None: ...
    def begin(self, nested: bool = ...) -> SessionTransaction: ...
    def begin_nested(self) -> SessionTransaction: ...
    def close(self) -> None: ...
    def reset(self) -> None: ...
    def commit(self) -> None: ...
    def connection(self, bind_arguments: Optional[_BindArguments] = ..., execution_options: Optional[CoreExecuteOptionsParameter] = ...) -> Connection: ...
    def delete(self, instance: object) -> None: ...
    @overload
    def execute(self, statement: TypedReturnsRows[_T], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., _parent_execute_state: Optional[Any] = ..., _add_event: Optional[Any] = ...) -> Result[_T]: ...
    @overload
    def execute(self, statement: UpdateBase, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., _parent_execute_state: Optional[Any] = ..., _add_event: Optional[Any] = ...) -> CursorResult[Any]: ...
    @overload
    def execute(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., _parent_execute_state: Optional[Any] = ..., _add_event: Optional[Any] = ...) -> Result[Any]: ...
    def expire(self, instance: object, attribute_names: Optional[Iterable[str]] = ...) -> None: ...
    def expire_all(self) -> None: ...
    def expunge(self, instance: object) -> None: ...
    def expunge_all(self) -> None: ...
    def flush(self, objects: Optional[Sequence[Any]] = ...) -> None: ...
    def get(self, entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Optional[Sequence[ORMOption]] = ..., populate_existing: bool = ..., with_for_update: ForUpdateParameter = ..., identity_token: Optional[Any] = ..., execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ...) -> Optional[_O]: ...
    def get_one(self, entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Optional[Sequence[ORMOption]] = ..., populate_existing: bool = ..., with_for_update: ForUpdateParameter = ..., identity_token: Optional[Any] = ..., execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ...) -> _O: ...
    def get_bind(self, mapper: Optional[_EntityBindKey[_O]] = ..., *, clause: Optional[ClauseElement] = ..., bind: Optional[_SessionBind] = ..., _sa_skip_events: Optional[bool] = ..., _sa_skip_for_implicit_returning: bool = ..., **kw: Any) -> Union[Engine, Connection]: ...
    def is_modified(self, instance: object, include_collections: bool = ...) -> bool: ...
    def bulk_save_objects(self, objects: Iterable[object], return_defaults: bool = ..., update_changed_only: bool = ..., preserve_order: bool = ...) -> None: ...
    def bulk_insert_mappings(self, mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]], return_defaults: bool = ..., render_nulls: bool = ...) -> None: ...
    def bulk_update_mappings(self, mapper: Mapper[Any], mappings: Iterable[Dict[str, Any]]) -> None: ...
    def merge(self, instance: _O, *, load: bool = ..., options: Optional[Sequence[ORMOption]] = ...) -> _O: ...
    @overload
    def query(self, _entity: _EntityType[_O]) -> Query[_O]: ...
    @overload
    def query(self, _colexpr: TypedColumnsClauseRole[_T]) -> RowReturningQuery[Tuple[_T]]: ...
    @overload
    def query(self, __ent0: _TCCA[_T0], __ent1: _TCCA[_T1]) -> RowReturningQuery[Tuple[_T0, _T1]]: ...
    @overload
    def query(self, __ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2]) -> RowReturningQuery[Tuple[_T0, _T1, _T2]]: ...
    @overload
    def query(self, __ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3]) -> RowReturningQuery[Tuple[_T0, _T1, _T2, _T3]]: ...
    @overload
    def query(self, __ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4]) -> RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4]]: ...
    @overload
    def query(self, __ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5]) -> RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5]]: ...
    @overload
    def query(self, __ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5], __ent6: _TCCA[_T6]) -> RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5, _T6]]: ...
    @overload
    def query(self, __ent0: _TCCA[_T0], __ent1: _TCCA[_T1], __ent2: _TCCA[_T2], __ent3: _TCCA[_T3], __ent4: _TCCA[_T4], __ent5: _TCCA[_T5], __ent6: _TCCA[_T6], __ent7: _TCCA[_T7]) -> RowReturningQuery[Tuple[_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7]]: ...
    @overload
    def query(self, *entities: _ColumnsClauseArgument[Any], **kwargs: Any) -> Query[Any]: ...
    def refresh(self, instance: object, attribute_names: Optional[Iterable[str]] = ..., with_for_update: ForUpdateParameter = ...) -> None: ...
    def rollback(self) -> None: ...
    @overload
    def scalar(self, statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreSingleExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> Optional[_T]: ...
    @overload
    def scalar(self, statement: Executable, params: Optional[_CoreSingleExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> Any: ...
    @overload
    def scalars(self, statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> ScalarResult[_T]: ...
    @overload
    def scalars(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> ScalarResult[Any]: ...
    @property
    def bind(self) -> Optional[Union[Engine, Connection]]: ...
    @bind.setter
    def bind(self, attr: Optional[Union[Engine, Connection]]) -> None: ...
    @property
    def dirty(self) -> Any: ...
    @property
    def deleted(self) -> Any: ...
    @property
    def new(self) -> Any: ...
    @property
    def identity_map(self) -> IdentityMap: ...
    @identity_map.setter
    def identity_map(self, attr: IdentityMap) -> None: ...
    @property
    def is_active(self) -> Any: ...
    @property
    def autoflush(self) -> bool: ...
    @autoflush.setter
    def autoflush(self, attr: bool) -> None: ...
    @property
    def no_autoflush(self) -> Any: ...
    @property
    def info(self) -> Any: ...
    @classmethod
    def close_all(cls) -> None: ...
    @classmethod
    def object_session(cls, instance: object) -> Optional[Session]: ...
    @classmethod
    def identity_key(cls, class_: Optional[Type[Any]] = ..., ident: Union[Any, Tuple[Any, ...]] = ..., *, instance: Optional[Any] = ..., row: Optional[Union[Row[Any], RowMapping]] = ..., identity_token: Optional[Any] = ...) -> _IdentityKeyType[Any]: ...
ScopedSession = scoped_session
