from . import path_registry as path_registry
from .. import ColumnElement as ColumnElement, inspection as inspection, util as util
from ..engine.result import Result as Result
from ..sql import operators as operators, roles as roles, visitors as visitors
from ..sql._typing import _ColumnExpressionArgument, _ColumnsClauseArgument, _InfoType
from ..sql.base import ExecutableOption as ExecutableOption, _NoArg
from ..sql.cache_key import HasCacheKey as HasCacheKey
from ..sql.operators import ColumnOperators as ColumnOperators, OperatorType as OperatorType
from ..sql.schema import Column as Column
from ..sql.type_api import TypeEngine as TypeEngine
from ..util import warn_deprecated as warn_deprecated
from ..util.typing import RODescriptorReference as RODescriptorReference, TypedDict as TypedDict, _AnnotationScanType
from ._typing import _EntityType, _IdentityKeyType, _InstanceDict, _InternalEntityType, _ORMAdapterProto
from .attributes import InstrumentedAttribute as InstrumentedAttribute
from .base import InspectionAttrInfo as InspectionAttrInfo, Mapped as Mapped, SQLORMOperations as SQLORMOperations, _MappedAttribute as _MappedAttribute
from .context import ORMCompileState as ORMCompileState, QueryContext as QueryContext, _MapperEntity
from .decl_api import RegistryType as RegistryType
from .decl_base import _ClassScanMapperConfig
from .loading import _PopulatorDict
from .mapper import Mapper as Mapper
from .path_registry import AbstractEntityRegistry as AbstractEntityRegistry
from .query import Query as Query
from .session import Session as Session
from .state import InstanceState as InstanceState
from .strategy_options import _LoadElement
from .util import AliasedInsp as AliasedInsp, ORMAdapter as ORMAdapter
from _typeshed import Incomplete
from typing import Any, Callable, ClassVar, Dict, Generic, Iterator, List, NamedTuple, Optional, Sequence, Set, Tuple, Type, Union

class ORMStatementRole(roles.StatementRole): ...
class ORMColumnsClauseRole(roles.ColumnsClauseRole, roles.TypedColumnsClauseRole[_T]): ...
class ORMEntityColumnsClauseRole(ORMColumnsClauseRole[_T]): ...
class ORMFromClauseRole(roles.StrictFromClauseRole): ...

class ORMColumnDescription(TypedDict):
    name: str
    type: Union[Type[Any], TypeEngine[Any]]
    aliased: bool
    expr: _ColumnsClauseArgument[Any]
    entity: Optional[_ColumnsClauseArgument[Any]]

class _IntrospectsAnnotations:
    def found_in_pep593_annotated(self) -> Any: ...
    def declarative_scan(self, decl_scan: _ClassScanMapperConfig, registry: RegistryType, cls: Type[Any], originating_module: Optional[str], key: str, mapped_container: Optional[Type[Mapped[Any]]], annotation: Optional[_AnnotationScanType], extracted_mapped_annotation: Optional[_AnnotationScanType], is_dataclass_field: bool) -> None: ...

class _AttributeOptions(NamedTuple):
    dataclasses_init: Union[_NoArg, bool]
    dataclasses_repr: Union[_NoArg, bool]
    dataclasses_default: Union[_NoArg, Any]
    dataclasses_default_factory: Union[_NoArg, Callable[[], Any]]
    dataclasses_compare: Union[_NoArg, bool]
    dataclasses_kw_only: Union[_NoArg, bool]

class _DCAttributeOptions: ...

class _MapsColumns(_DCAttributeOptions, _MappedAttribute[_T]):
    @property
    def mapper_property_to_assign(self) -> Optional[MapperProperty[_T]]: ...
    @property
    def columns_to_assign(self) -> List[Tuple[Column[_T], int]]: ...

class MapperProperty(HasCacheKey, _DCAttributeOptions, _MappedAttribute[_T], InspectionAttrInfo, util.MemoizedSlots):
    is_property: bool
    comparator: PropComparator[_T]
    key: str
    parent: Mapper[Any]
    doc: Optional[str]
    info: _InfoType
    def setup(self, context: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, adapter: Optional[ORMAdapter], **kwargs: Any) -> None: ...
    def create_row_processor(self, context: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, mapper: Mapper[Any], result: Result[Any], adapter: Optional[ORMAdapter], populators: _PopulatorDict) -> None: ...
    def cascade_iterator(self, type_: str, state: InstanceState[Any], dict_: _InstanceDict, visited_states: Set[InstanceState[Any]], halt_on: Optional[Callable[[InstanceState[Any]], bool]] = ...) -> Iterator[Tuple[object, Mapper[Any], InstanceState[Any], _InstanceDict]]: ...
    def set_parent(self, parent: Mapper[Any], init: bool) -> None: ...
    def instrument_class(self, mapper: Mapper[Any]) -> None: ...
    def __init__(self, attribute_options: Optional[_AttributeOptions] = ..., _assume_readonly_dc_attributes: bool = ...) -> None: ...
    def init(self) -> None: ...
    @property
    def class_attribute(self) -> InstrumentedAttribute[_T]: ...
    def do_init(self) -> None: ...
    def post_instrument_class(self, mapper: Mapper[Any]) -> None: ...
    def merge(self, session: Session, source_state: InstanceState[Any], source_dict: _InstanceDict, dest_state: InstanceState[Any], dest_dict: _InstanceDict, load: bool, _recursive: Dict[Any, object], _resolve_conflict_map: Dict[_IdentityKeyType[Any], object]) -> None: ...

class PropComparator(SQLORMOperations[_T_co], ColumnOperators, Generic[_T_co]):
    __visit_name__: str
    prop: RODescriptorReference[MapperProperty[_T_co]]
    def __init__(self, prop: MapperProperty[_T], parentmapper: _InternalEntityType[Any], adapt_to_entity: Optional[AliasedInsp[Any]] = ...) -> None: ...
    def property(self) -> MapperProperty[_T]: ...
    def __clause_element__(self) -> roles.ColumnsClauseRole: ...
    def adapt_to_entity(self, adapt_to_entity: AliasedInsp[Any]) -> PropComparator[_T]: ...
    def adapter(self) -> Optional[_ORMAdapterProto]: ...
    def info(self) -> _InfoType: ...
    any_op: Incomplete
    has_op: Incomplete
    of_type_op: Incomplete
    def operate(self, op: OperatorType, *other: Any, **kwargs: Any) -> ColumnElement[Any]: ...
    def reverse_operate(self, op: OperatorType, other: Any, **kwargs: Any) -> ColumnElement[Any]: ...
    def of_type(self, class_: _EntityType[Any]) -> PropComparator[_T]: ...
    def and_(self, *criteria: _ColumnExpressionArgument[bool]) -> PropComparator[bool]: ...
    def any(self, criterion: Optional[_ColumnExpressionArgument[bool]] = ..., **kwargs: Any) -> ColumnElement[bool]: ...
    def has(self, criterion: Optional[_ColumnExpressionArgument[bool]] = ..., **kwargs: Any) -> ColumnElement[bool]: ...

class StrategizedProperty(MapperProperty[_T]):
    inherit_cache: bool
    strategy_wildcard_key: ClassVar[str]
    strategy_key: _StrategyKey
    def setup(self, context: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, adapter: Optional[ORMAdapter], **kwargs: Any) -> None: ...
    def create_row_processor(self, context: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, mapper: Mapper[Any], result: Result[Any], adapter: Optional[ORMAdapter], populators: _PopulatorDict) -> None: ...
    strategy: Incomplete
    def do_init(self) -> None: ...
    def post_instrument_class(self, mapper: Mapper[Any]) -> None: ...
    @classmethod
    def strategy_for(cls, **kw: Any) -> Callable[[_TLS], _TLS]: ...

class ORMOption(ExecutableOption):
    propagate_to_loaders: bool

class CompileStateOption(HasCacheKey, ORMOption):
    def process_compile_state(self, compile_state: ORMCompileState) -> None: ...
    def process_compile_state_replaced_entities(self, compile_state: ORMCompileState, mapper_entities: Sequence[_MapperEntity]) -> None: ...

class LoaderOption(CompileStateOption):
    def process_compile_state_replaced_entities(self, compile_state: ORMCompileState, mapper_entities: Sequence[_MapperEntity]) -> None: ...

class CriteriaOption(CompileStateOption):
    def get_global_criteria(self, attributes: Dict[str, Any]) -> None: ...

class UserDefinedOption(ORMOption):
    propagate_to_loaders: bool
    payload: Incomplete
    def __init__(self, payload: Optional[Any] = ...) -> None: ...

class MapperOption(ORMOption):
    propagate_to_loaders: bool
    def process_query(self, query: Query[Any]) -> None: ...
    def process_query_conditionally(self, query: Query[Any]) -> None: ...

class LoaderStrategy:
    parent_property: Incomplete
    is_class_level: bool
    parent: Incomplete
    key: Incomplete
    strategy_key: Incomplete
    strategy_opts: Incomplete
    def __init__(self, parent: MapperProperty[Any], strategy_key: _StrategyKey) -> None: ...
    def init_class_attribute(self, mapper: Mapper[Any]) -> None: ...
    def setup_query(self, compile_state: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, loadopt: Optional[_LoadElement], adapter: Optional[ORMAdapter], **kwargs: Any) -> None: ...
    def create_row_processor(self, context: ORMCompileState, query_entity: _MapperEntity, path: AbstractEntityRegistry, loadopt: Optional[_LoadElement], mapper: Mapper[Any], result: Result[Any], adapter: Optional[ORMAdapter], populators: _PopulatorDict) -> None: ...
