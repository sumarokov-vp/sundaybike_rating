from . import engine as engine
from ... import util as util
from ...engine import Connection as Connection, CursorResult as CursorResult, Engine as Engine, Result as Result, Row as Row, RowMapping as RowMapping, ScalarResult as ScalarResult
from ...engine.interfaces import CoreExecuteOptionsParameter as CoreExecuteOptionsParameter, _CoreAnyExecuteParams
from ...event import dispatcher as dispatcher
from ...orm import Session as Session, SessionTransaction as SessionTransaction, object_session as object_session
from ...orm._typing import OrmExecuteOptionsParameter as OrmExecuteOptionsParameter, _IdentityKeyType, _O
from ...orm.identity import IdentityMap as IdentityMap
from ...orm.interfaces import ORMOption as ORMOption
from ...orm.session import _BindArguments, _EntityBindKey, _PKIdentityArgument, _SessionBind, _SessionBindKey
from ...sql._typing import _InfoType
from ...sql.base import Executable as Executable
from ...sql.dml import UpdateBase as UpdateBase
from ...sql.elements import ClauseElement as ClauseElement
from ...sql.selectable import ForUpdateParameter as ForUpdateParameter, TypedReturnsRows as TypedReturnsRows
from ...util.concurrency import greenlet_spawn as greenlet_spawn
from .base import ReversibleProxy as ReversibleProxy, StartableContext as StartableContext
from .engine import AsyncConnection as AsyncConnection, AsyncEngine as AsyncEngine
from .result import AsyncResult as AsyncResult, AsyncScalarResult as AsyncScalarResult
from _typeshed import Incomplete
from typing import Any, Awaitable, Callable, Dict, Generic, Iterable, Iterator, Optional, Sequence, Tuple, Type, Union, overload

class AsyncAttrs:
    class _AsyncAttrGetitem:
        def __init__(self, _instance: Any) -> None: ...
        def __getattr__(self, name: str) -> Awaitable[Any]: ...
    @property
    def awaitable_attrs(self) -> AsyncAttrs._AsyncAttrGetitem: ...

class AsyncSession(ReversibleProxy[Session]):
    dispatch: dispatcher[Session]
    bind: Incomplete
    binds: Incomplete
    sync_session_class: Incomplete
    sync_session: Incomplete
    def __init__(self, bind: Optional[_AsyncSessionBind] = ..., *, binds: Optional[Dict[_SessionBindKey, _AsyncSessionBind]] = ..., sync_session_class: Optional[Type[Session]] = ..., **kw: Any) -> None: ...
    async def refresh(self, instance: object, attribute_names: Optional[Iterable[str]] = ..., with_for_update: ForUpdateParameter = ...) -> None: ...
    async def run_sync(self, fn: Callable[..., _T], *arg: Any, **kw: Any) -> _T: ...
    @overload
    async def execute(self, statement: TypedReturnsRows[_T], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., _parent_execute_state: Optional[Any] = ..., _add_event: Optional[Any] = ...) -> Result[_T]: ...
    @overload
    async def execute(self, statement: UpdateBase, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., _parent_execute_state: Optional[Any] = ..., _add_event: Optional[Any] = ...) -> CursorResult[Any]: ...
    @overload
    async def execute(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., _parent_execute_state: Optional[Any] = ..., _add_event: Optional[Any] = ...) -> Result[Any]: ...
    @overload
    async def scalar(self, statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> Optional[_T]: ...
    @overload
    async def scalar(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> Any: ...
    @overload
    async def scalars(self, statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> ScalarResult[_T]: ...
    @overload
    async def scalars(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> ScalarResult[Any]: ...
    async def get(self, entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Optional[Sequence[ORMOption]] = ..., populate_existing: bool = ..., with_for_update: ForUpdateParameter = ..., identity_token: Optional[Any] = ..., execution_options: OrmExecuteOptionsParameter = ...) -> Union[_O, None]: ...
    async def get_one(self, entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Optional[Sequence[ORMOption]] = ..., populate_existing: bool = ..., with_for_update: ForUpdateParameter = ..., identity_token: Optional[Any] = ..., execution_options: OrmExecuteOptionsParameter = ...) -> _O: ...
    @overload
    async def stream(self, statement: TypedReturnsRows[_T], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> AsyncResult[_T]: ...
    @overload
    async def stream(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> AsyncResult[Any]: ...
    @overload
    async def stream_scalars(self, statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> AsyncScalarResult[_T]: ...
    @overload
    async def stream_scalars(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> AsyncScalarResult[Any]: ...
    async def delete(self, instance: object) -> None: ...
    async def merge(self, instance: _O, *, load: bool = ..., options: Optional[Sequence[ORMOption]] = ...) -> _O: ...
    async def flush(self, objects: Optional[Sequence[Any]] = ...) -> None: ...
    def get_transaction(self) -> Optional[AsyncSessionTransaction]: ...
    def get_nested_transaction(self) -> Optional[AsyncSessionTransaction]: ...
    def get_bind(self, mapper: Optional[_EntityBindKey[_O]] = ..., clause: Optional[ClauseElement] = ..., bind: Optional[_SessionBind] = ..., **kw: Any) -> Union[Engine, Connection]: ...
    async def connection(self, bind_arguments: Optional[_BindArguments] = ..., execution_options: Optional[CoreExecuteOptionsParameter] = ..., **kw: Any) -> AsyncConnection: ...
    def begin(self) -> AsyncSessionTransaction: ...
    def begin_nested(self) -> AsyncSessionTransaction: ...
    async def rollback(self) -> None: ...
    async def commit(self) -> None: ...
    async def close(self) -> None: ...
    async def reset(self) -> None: ...
    async def aclose(self) -> None: ...
    async def invalidate(self) -> None: ...
    @classmethod
    async def close_all(cls) -> None: ...
    async def __aenter__(self) -> _AS: ...
    async def __aexit__(self, type_: Any, value: Any, traceback: Any) -> None: ...
    def __contains__(self, instance: object) -> bool: ...
    def __iter__(self) -> Iterator[object]: ...
    def add(self, instance: object, _warn: bool = ...) -> None: ...
    def add_all(self, instances: Iterable[object]) -> None: ...
    def expire(self, instance: object, attribute_names: Optional[Iterable[str]] = ...) -> None: ...
    def expire_all(self) -> None: ...
    def expunge(self, instance: object) -> None: ...
    def expunge_all(self) -> None: ...
    def is_modified(self, instance: object, include_collections: bool = ...) -> bool: ...
    def in_transaction(self) -> bool: ...
    def in_nested_transaction(self) -> bool: ...
    @property
    def dirty(self) -> Any: ...
    @property
    def deleted(self) -> Any: ...
    @property
    def new(self) -> Any: ...
    @property
    def identity_map(self) -> IdentityMap: ...
    @identity_map.setter
    def identity_map(self, attr: IdentityMap) -> None: ...
    @property
    def is_active(self) -> Any: ...
    @property
    def autoflush(self) -> bool: ...
    @autoflush.setter
    def autoflush(self, attr: bool) -> None: ...
    @property
    def no_autoflush(self) -> Any: ...
    @property
    def info(self) -> Any: ...
    @classmethod
    def object_session(cls, instance: object) -> Optional[Session]: ...
    @classmethod
    def identity_key(cls, class_: Optional[Type[Any]] = ..., ident: Union[Any, Tuple[Any, ...]] = ..., *, instance: Optional[Any] = ..., row: Optional[Union[Row[Any], RowMapping]] = ..., identity_token: Optional[Any] = ...) -> _IdentityKeyType[Any]: ...

class async_sessionmaker(Generic[_AS]):
    class_: Type[_AS]
    @overload
    def __init__(self, bind: Optional[_AsyncSessionBind] = ..., *, class_: Type[_AS], autoflush: bool = ..., expire_on_commit: bool = ..., info: Optional[_InfoType] = ..., **kw: Any) -> None: ...
    @overload
    def __init__(self, bind: Optional[_AsyncSessionBind] = ..., *, autoflush: bool = ..., expire_on_commit: bool = ..., info: Optional[_InfoType] = ..., **kw: Any) -> None: ...
    def begin(self) -> _AsyncSessionContextManager[_AS]: ...
    def __call__(self, **local_kw: Any) -> _AS: ...
    def configure(self, **new_kw: Any) -> None: ...

class _AsyncSessionContextManager(Generic[_AS]):
    async_session: _AS
    trans: AsyncSessionTransaction
    def __init__(self, async_session: _AS) -> None: ...
    async def __aenter__(self) -> _AS: ...
    async def __aexit__(self, type_: Any, value: Any, traceback: Any) -> None: ...

class AsyncSessionTransaction(ReversibleProxy[SessionTransaction], StartableContext['AsyncSessionTransaction']):
    session: AsyncSession
    sync_transaction: Optional[SessionTransaction]
    nested: Incomplete
    def __init__(self, session: AsyncSession, nested: bool = ...) -> None: ...
    @property
    def is_active(self) -> bool: ...
    async def rollback(self) -> None: ...
    async def commit(self) -> None: ...
    async def start(self, is_ctxmanager: bool = ...) -> AsyncSessionTransaction: ...
    async def __aexit__(self, type_: Any, value: Any, traceback: Any) -> None: ...

def async_object_session(instance: object) -> Optional[AsyncSession]: ...
def async_session(session: Session) -> Optional[AsyncSession]: ...
async def close_all_sessions() -> None: ...
