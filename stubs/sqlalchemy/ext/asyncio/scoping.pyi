from ... import util as util
from ...engine import Connection as Connection, CursorResult as CursorResult, Engine as Engine, Result as Result, Row as Row, RowMapping as RowMapping
from ...engine.interfaces import CoreExecuteOptionsParameter as CoreExecuteOptionsParameter, _CoreAnyExecuteParams
from ...engine.result import ScalarResult as ScalarResult
from ...orm._typing import OrmExecuteOptionsParameter as OrmExecuteOptionsParameter, _IdentityKeyType, _O
from ...orm.interfaces import ORMOption as ORMOption
from ...orm.session import Session as Session, _BindArguments, _EntityBindKey, _PKIdentityArgument, _SessionBind
from ...sql.base import Executable as Executable
from ...sql.dml import UpdateBase as UpdateBase
from ...sql.elements import ClauseElement as ClauseElement
from ...sql.selectable import ForUpdateParameter as ForUpdateParameter, TypedReturnsRows as TypedReturnsRows
from ...util import ScopedRegistry as ScopedRegistry, create_proxy_methods as create_proxy_methods, warn as warn, warn_deprecated as warn_deprecated
from .engine import AsyncConnection as AsyncConnection
from .result import AsyncResult as AsyncResult, AsyncScalarResult as AsyncScalarResult
from .session import AsyncSession as AsyncSession, AsyncSessionTransaction as AsyncSessionTransaction, _AS, async_sessionmaker as async_sessionmaker
from typing import Any, Callable, Generic, Iterable, Iterator, Optional, Sequence, Tuple, Type, Union, overload

class async_scoped_session(Generic[_AS]):
    session_factory: async_sessionmaker[_AS]
    registry: ScopedRegistry[_AS]
    def __init__(self, session_factory: async_sessionmaker[_AS], scopefunc: Callable[[], Any]) -> None: ...
    def __call__(self, **kw: Any) -> _AS: ...
    def configure(self, **kwargs: Any) -> None: ...
    async def remove(self) -> None: ...
    def __contains__(self, instance: object) -> bool: ...
    def __iter__(self) -> Iterator[object]: ...
    async def aclose(self) -> None: ...
    def add(self, instance: object, _warn: bool = ...) -> None: ...
    def add_all(self, instances: Iterable[object]) -> None: ...
    def begin(self) -> AsyncSessionTransaction: ...
    def begin_nested(self) -> AsyncSessionTransaction: ...
    async def close(self) -> None: ...
    async def reset(self) -> None: ...
    async def commit(self) -> None: ...
    async def connection(self, bind_arguments: Optional[_BindArguments] = ..., execution_options: Optional[CoreExecuteOptionsParameter] = ..., **kw: Any) -> AsyncConnection: ...
    async def delete(self, instance: object) -> None: ...
    @overload
    async def execute(self, statement: TypedReturnsRows[_T], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., _parent_execute_state: Optional[Any] = ..., _add_event: Optional[Any] = ...) -> Result[_T]: ...
    @overload
    async def execute(self, statement: UpdateBase, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., _parent_execute_state: Optional[Any] = ..., _add_event: Optional[Any] = ...) -> CursorResult[Any]: ...
    @overload
    async def execute(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., _parent_execute_state: Optional[Any] = ..., _add_event: Optional[Any] = ...) -> Result[Any]: ...
    def expire(self, instance: object, attribute_names: Optional[Iterable[str]] = ...) -> None: ...
    def expire_all(self) -> None: ...
    def expunge(self, instance: object) -> None: ...
    def expunge_all(self) -> None: ...
    async def flush(self, objects: Optional[Sequence[Any]] = ...) -> None: ...
    def get_bind(self, mapper: Optional[_EntityBindKey[_O]] = ..., clause: Optional[ClauseElement] = ..., bind: Optional[_SessionBind] = ..., **kw: Any) -> Union[Engine, Connection]: ...
    def is_modified(self, instance: object, include_collections: bool = ...) -> bool: ...
    async def invalidate(self) -> None: ...
    async def merge(self, instance: _O, *, load: bool = ..., options: Optional[Sequence[ORMOption]] = ...) -> _O: ...
    async def refresh(self, instance: object, attribute_names: Optional[Iterable[str]] = ..., with_for_update: ForUpdateParameter = ...) -> None: ...
    async def rollback(self) -> None: ...
    @overload
    async def scalar(self, statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> Optional[_T]: ...
    @overload
    async def scalar(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> Any: ...
    @overload
    async def scalars(self, statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> ScalarResult[_T]: ...
    @overload
    async def scalars(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> ScalarResult[Any]: ...
    async def get(self, entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Optional[Sequence[ORMOption]] = ..., populate_existing: bool = ..., with_for_update: ForUpdateParameter = ..., identity_token: Optional[Any] = ..., execution_options: OrmExecuteOptionsParameter = ...) -> Union[_O, None]: ...
    async def get_one(self, entity: _EntityBindKey[_O], ident: _PKIdentityArgument, *, options: Optional[Sequence[ORMOption]] = ..., populate_existing: bool = ..., with_for_update: ForUpdateParameter = ..., identity_token: Optional[Any] = ..., execution_options: OrmExecuteOptionsParameter = ...) -> _O: ...
    @overload
    async def stream(self, statement: TypedReturnsRows[_T], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> AsyncResult[_T]: ...
    @overload
    async def stream(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> AsyncResult[Any]: ...
    @overload
    async def stream_scalars(self, statement: TypedReturnsRows[Tuple[_T]], params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> AsyncScalarResult[_T]: ...
    @overload
    async def stream_scalars(self, statement: Executable, params: Optional[_CoreAnyExecuteParams] = ..., *, execution_options: OrmExecuteOptionsParameter = ..., bind_arguments: Optional[_BindArguments] = ..., **kw: Any) -> AsyncScalarResult[Any]: ...
    @property
    def bind(self) -> Any: ...
    @bind.setter
    def bind(self, attr: Any) -> None: ...
    @property
    def dirty(self) -> Any: ...
    @property
    def deleted(self) -> Any: ...
    @property
    def new(self) -> Any: ...
    @property
    def identity_map(self) -> Any: ...
    @identity_map.setter
    def identity_map(self, attr: Any) -> None: ...
    @property
    def is_active(self) -> Any: ...
    @property
    def autoflush(self) -> Any: ...
    @autoflush.setter
    def autoflush(self, attr: Any) -> None: ...
    @property
    def no_autoflush(self) -> Any: ...
    @property
    def info(self) -> Any: ...
    @classmethod
    async def close_all(cls) -> None: ...
    @classmethod
    def object_session(cls, instance: object) -> Optional[Session]: ...
    @classmethod
    def identity_key(cls, class_: Optional[Type[Any]] = ..., ident: Union[Any, Tuple[Any, ...]] = ..., *, instance: Optional[Any] = ..., row: Optional[Union[Row[Any], RowMapping]] = ..., identity_token: Optional[Any] = ...) -> _IdentityKeyType[Any]: ...
