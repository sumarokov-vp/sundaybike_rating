from _typeshed import Incomplete
from mypy.nodes import CallExpr, ClassDef as ClassDef, Context as Context, Expression as Expression, JsonDict as JsonDict, NameExpr, Statement as Statement, TypeInfo
from mypy.options import Options as Options
from mypy.plugin import ClassDefContext as ClassDefContext, DynamicClassDefContext as DynamicClassDefContext, SemanticAnalyzerPluginInterface as SemanticAnalyzerPluginInterface
from mypy.types import Instance, Type as Type
from typing import Iterable, Iterator, List, Optional, Tuple, Type as TypingType, Union, overload

mypy_14: Incomplete

class SQLAlchemyAttribute:
    name: Incomplete
    line: Incomplete
    column: Incomplete
    type: Incomplete
    info: Incomplete
    def __init__(self, name: str, line: int, column: int, typ: Optional[Type], info: TypeInfo) -> None: ...
    def serialize(self) -> JsonDict: ...
    def expand_typevar_from_subtype(self, sub_type: TypeInfo) -> None: ...
    @classmethod
    def deserialize(cls, info: TypeInfo, data: JsonDict, api: SemanticAnalyzerPluginInterface) -> SQLAlchemyAttribute: ...

def name_is_dunder(name: str) -> bool: ...
def establish_as_sqlalchemy(info: TypeInfo) -> None: ...
def set_is_base(info: TypeInfo) -> None: ...
def get_is_base(info: TypeInfo) -> bool: ...
def has_declarative_base(info: TypeInfo) -> bool: ...
def set_has_table(info: TypeInfo) -> None: ...
def get_has_table(info: TypeInfo) -> bool: ...
def get_mapped_attributes(info: TypeInfo, api: SemanticAnalyzerPluginInterface) -> Optional[List[SQLAlchemyAttribute]]: ...
def format_type(typ_: Type, options: Options) -> str: ...
def set_mapped_attributes(info: TypeInfo, attributes: List[SQLAlchemyAttribute]) -> None: ...
def fail(api: SemanticAnalyzerPluginInterface, msg: str, ctx: Context) -> None: ...
def add_global(ctx: Union[ClassDefContext, DynamicClassDefContext], module: str, symbol_name: str, asname: str) -> None: ...
@overload
def get_callexpr_kwarg(callexpr: CallExpr, name: str, *, expr_types: None = ...) -> Optional[Union[CallExpr, NameExpr]]: ...
@overload
def get_callexpr_kwarg(callexpr: CallExpr, name: str, *, expr_types: Tuple[TypingType[_TArgType], ...]) -> Optional[_TArgType]: ...
def flatten_typechecking(stmts: Iterable[Statement]) -> Iterator[Statement]: ...
def type_for_callee(callee: Expression) -> Optional[Union[Instance, TypeInfo]]: ...
def unbound_to_instance(api: SemanticAnalyzerPluginInterface, typ: Type) -> Type: ...
def info_for_cls(cls, api: SemanticAnalyzerPluginInterface) -> Optional[TypeInfo]: ...
