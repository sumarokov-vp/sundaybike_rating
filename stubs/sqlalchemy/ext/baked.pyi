from .. import util as util
from ..orm.query import Query as Query
from ..orm.session import Session as Session
from ..sql import func as func, literal_column as literal_column
from _typeshed import Incomplete

log: Incomplete

class Bakery:
    cls: Incomplete
    cache: Incomplete
    def __init__(self, cls_, cache) -> None: ...
    def __call__(self, initial_fn, *args): ...

class BakedQuery:
    steps: Incomplete
    def __init__(self, bakery, initial_fn, args=...) -> None: ...
    @classmethod
    def bakery(cls, size: int = ..., _size_alert: Incomplete | None = ...): ...
    def __iadd__(self, other): ...
    def __add__(self, other): ...
    def add_criteria(self, fn, *args): ...
    def with_criteria(self, fn, *args): ...
    def for_session(self, session): ...
    def __call__(self, session): ...
    def spoil(self, full: bool = ...): ...
    def to_query(self, query_or_session): ...

class Result:
    bq: Incomplete
    session: Incomplete
    def __init__(self, bq, session) -> None: ...
    def params(self, *args, **kw): ...
    def with_post_criteria(self, fn): ...
    def __iter__(self): ...
    def count(self): ...
    def scalar(self): ...
    def first(self): ...
    def one(self): ...
    def one_or_none(self): ...
    def all(self): ...
    def get(self, ident): ...

bakery: Incomplete
