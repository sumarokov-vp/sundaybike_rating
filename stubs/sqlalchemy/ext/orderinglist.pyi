from typing import Callable, List, Optional

def ordering_list(attr: str, count_from: Optional[int] = ..., ordering_func: Optional[OrderingFunc] = ..., reorder_on_append: bool = ...) -> Callable[[], OrderingList]: ...

class OrderingList(List[_T]):
    ordering_attr: str
    ordering_func: OrderingFunc
    reorder_on_append: bool
    def __init__(self, ordering_attr: Optional[str] = ..., ordering_func: Optional[OrderingFunc] = ..., reorder_on_append: bool = ...) -> None: ...
    def reorder(self) -> None: ...
    def append(self, entity) -> None: ...
    def insert(self, index, entity) -> None: ...
    def remove(self, entity) -> None: ...
    def pop(self, index: int = ...): ...
    def __setitem__(self, index, entity) -> None: ...
    def __delitem__(self, index) -> None: ...
    def __setslice__(self, start, end, values) -> None: ...
    def __delslice__(self, start, end) -> None: ...
    def __reduce__(self): ...
