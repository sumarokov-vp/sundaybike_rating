from .. import event as event, inspect as inspect, types as types
from ..orm import Mapper as Mapper
from ..orm._typing import _O, _T
from ..orm.attributes import AttributeEventToken as AttributeEventToken, InstrumentedAttribute as InstrumentedAttribute, QueryableAttribute as QueryableAttribute, flag_modified as flag_modified
from ..orm.context import QueryContext as QueryContext
from ..orm.decl_api import DeclarativeAttributeIntercept as DeclarativeAttributeIntercept
from ..orm.state import InstanceState as InstanceState
from ..orm.unitofwork import UOWTransaction as UOWTransaction
from ..sql.base import SchemaEventTarget as SchemaEventTarget
from ..sql.schema import Column as Column
from ..sql.type_api import TypeEngine as TypeEngine
from ..util import memoized_property as memoized_property
from ..util.typing import SupportsIndex as SupportsIndex, TypeGuard as TypeGuard
from typing import AbstractSet, Any, Dict, Iterable, List, Optional, Set, Tuple, overload

class MutableBase:
    @classmethod
    def coerce(cls, key: str, value: Any) -> Optional[Any]: ...

class Mutable(MutableBase):
    def changed(self) -> None: ...
    @classmethod
    def associate_with_attribute(cls, attribute: InstrumentedAttribute[_O]) -> None: ...
    @classmethod
    def associate_with(cls, sqltype: type) -> None: ...
    @classmethod
    def as_mutable(cls, sqltype: TypeEngine[_T]) -> TypeEngine[_T]: ...

class MutableComposite(MutableBase):
    def changed(self) -> None: ...

class MutableDict(Mutable, Dict[_KT, _VT]):
    def __setitem__(self, key: _KT, value: _VT) -> None: ...
    @overload
    def setdefault(self, key: _KT, value: None = ...) -> Optional[_T]: ...
    @overload
    def setdefault(self, key: _KT, value: _VT) -> _VT: ...
    def __delitem__(self, key: _KT) -> None: ...
    def update(self, *a: Any, **kw: _VT) -> None: ...
    @overload
    def pop(self, __key: _KT) -> _VT: ...
    @overload
    def pop(self, __key: _KT, __default: _VT | _T) -> _VT | _T: ...
    def popitem(self) -> Tuple[_KT, _VT]: ...
    def clear(self) -> None: ...
    @classmethod
    def coerce(cls, key: str, value: Any) -> MutableDict[_KT, _VT] | None: ...

class MutableList(Mutable, List[_T]):
    def __reduce_ex__(self, proto: SupportsIndex) -> Tuple[type, Tuple[List[int]]]: ...
    def is_scalar(self, value: _T | Iterable[_T]) -> TypeGuard[_T]: ...
    def is_iterable(self, value: _T | Iterable[_T]) -> TypeGuard[Iterable[_T]]: ...
    def __setitem__(self, index: SupportsIndex | slice, value: _T | Iterable[_T]) -> None: ...
    def __delitem__(self, index: SupportsIndex | slice) -> None: ...
    def pop(self, *arg: SupportsIndex) -> _T: ...
    def append(self, x: _T) -> None: ...
    def extend(self, x: Iterable[_T]) -> None: ...
    def __iadd__(self, x: Iterable[_T]) -> MutableList[_T]: ...
    def insert(self, i: SupportsIndex, x: _T) -> None: ...
    def remove(self, i: _T) -> None: ...
    def clear(self) -> None: ...
    def sort(self, **kw: Any) -> None: ...
    def reverse(self) -> None: ...
    @classmethod
    def coerce(cls, key: str, value: MutableList[_T] | _T) -> Optional[MutableList[_T]]: ...

class MutableSet(Mutable, Set[_T]):
    def update(self, *arg: Iterable[_T]) -> None: ...
    def intersection_update(self, *arg: Iterable[Any]) -> None: ...
    def difference_update(self, *arg: Iterable[Any]) -> None: ...
    def symmetric_difference_update(self, *arg: Iterable[_T]) -> None: ...
    def __ior__(self, other: AbstractSet[_T]) -> MutableSet[_T]: ...
    def __iand__(self, other: AbstractSet[object]) -> MutableSet[_T]: ...
    def __ixor__(self, other: AbstractSet[_T]) -> MutableSet[_T]: ...
    def __isub__(self, other: AbstractSet[object]) -> MutableSet[_T]: ...
    def add(self, elem: _T) -> None: ...
    def remove(self, elem: _T) -> None: ...
    def discard(self, elem: _T) -> None: ...
    def pop(self, *arg: Any) -> _T: ...
    def clear(self) -> None: ...
    @classmethod
    def coerce(cls, index: str, value: Any) -> Optional[MutableSet[_T]]: ...
    def __reduce_ex__(self, proto: SupportsIndex) -> Tuple[type, Tuple[List[int]]]: ...
