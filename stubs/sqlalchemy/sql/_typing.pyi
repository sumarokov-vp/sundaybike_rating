from . import roles as roles
from .. import exc as exc, util as util
from ..inspection import Inspectable as Inspectable
from ..util.typing import Literal as Literal, Protocol as Protocol, TypeAlias as TypeAlias, TypeGuard as TypeGuard
from .base import Executable as Executable
from .compiler import Compiled as Compiled, DDLCompiler as DDLCompiler, SQLCompiler as SQLCompiler
from .dml import UpdateBase as UpdateBase, ValuesBase as ValuesBase
from .elements import ClauseElement as ClauseElement, ColumnElement as ColumnElement, KeyedColumnElement as KeyedColumnElement, SQLCoreOperations as SQLCoreOperations, TextClause as TextClause, quoted_name as quoted_name
from .lambdas import LambdaElement as LambdaElement
from .roles import ColumnsClauseRole as ColumnsClauseRole, FromClauseRole as FromClauseRole
from .schema import Column as Column
from .selectable import Alias as Alias, CTE as CTE, FromClause as FromClause, Join as Join, NamedFromClause as NamedFromClause, ReturnsRows as ReturnsRows, Select as Select, SelectBase as SelectBase, Selectable as Selectable, Subquery as Subquery, TableClause as TableClause
from .sqltypes import TableValueType as TableValueType, TupleType as TupleType
from .type_api import TypeEngine as TypeEngine
from typing import Any, Optional, Type, Union, overload

class _HasClauseElement(Protocol):
    def __clause_element__(self) -> ColumnsClauseRole: ...

class _CoreAdapterProto(Protocol):
    def __call__(self, obj: _CE) -> _CE: ...

ColumnExpressionArgument: TypeAlias

def is_sql_compiler(c: Compiled) -> TypeGuard[SQLCompiler]: ...
def is_ddl_compiler(c: Compiled) -> TypeGuard[DDLCompiler]: ...
def is_named_from_clause(t: FromClauseRole) -> TypeGuard[NamedFromClause]: ...
def is_column_element(c: ClauseElement) -> TypeGuard[ColumnElement[Any]]: ...
def is_keyed_column_element(c: ClauseElement) -> TypeGuard[KeyedColumnElement[Any]]: ...
def is_text_clause(c: ClauseElement) -> TypeGuard[TextClause]: ...
def is_from_clause(c: ClauseElement) -> TypeGuard[FromClause]: ...
def is_tuple_type(t: TypeEngine[Any]) -> TypeGuard[TupleType]: ...
def is_table_value_type(t: TypeEngine[Any]) -> TypeGuard[TableValueType]: ...
def is_selectable(t: Any) -> TypeGuard[Selectable]: ...
def is_select_base(t: Union[Executable, ReturnsRows]) -> TypeGuard[SelectBase]: ...
def is_select_statement(t: Union[Executable, ReturnsRows]) -> TypeGuard[Select[Any]]: ...
def is_table(t: FromClause) -> TypeGuard[TableClause]: ...
def is_subquery(t: FromClause) -> TypeGuard[Subquery]: ...
def is_dml(c: ClauseElement) -> TypeGuard[UpdateBase]: ...
def has_schema_attr(t: FromClauseRole) -> TypeGuard[TableClause]: ...
def is_quoted_name(s: str) -> TypeGuard[quoted_name]: ...
def is_has_clause_element(s: object) -> TypeGuard[_HasClauseElement]: ...
def is_insert_update(c: ClauseElement) -> TypeGuard[ValuesBase]: ...
@overload
def Nullable(val: SQLCoreOperations[_T]) -> SQLCoreOperations[Optional[_T]]: ...
@overload
def Nullable(val: roles.ExpressionElementRole[_T]) -> roles.ExpressionElementRole[Optional[_T]]: ...
@overload
def Nullable(val: Type[_T]) -> Type[Optional[_T]]: ...
@overload
def NotNullable(val: SQLCoreOperations[Optional[_T]]) -> SQLCoreOperations[_T]: ...
@overload
def NotNullable(val: roles.ExpressionElementRole[Optional[_T]]) -> roles.ExpressionElementRole[_T]: ...
@overload
def NotNullable(val: Type[Optional[_T]]) -> Type[_T]: ...
@overload
def NotNullable(val: Optional[Type[_T]]) -> Type[_T]: ...
