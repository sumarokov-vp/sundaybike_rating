from . import operators as operators
from .. import util as util
from ..util import langhelpers as langhelpers
from ..util.typing import Self as Self
from .cache_key import HasCacheKey as HasCacheKey
from .visitors import ExternallyTraversible as ExternallyTraversible, HasTraversalDispatch as HasTraversalDispatch, HasTraverseInternals as HasTraverseInternals, anon_map as anon_map
from _typeshed import Incomplete
from collections.abc import Generator
from typing import Any

SKIP_TRAVERSE: Incomplete
COMPARE_FAILED: bool
COMPARE_SUCCEEDED: bool

def compare(obj1: Any, obj2: Any, **kw: Any) -> bool: ...

class HasShallowCopy(HasTraverseInternals): ...
class GenerativeOnTraversal(HasShallowCopy): ...
class HasCopyInternals(HasTraverseInternals): ...

class _CopyInternalsTraversal(HasTraversalDispatch):
    def visit_clauseelement(self, attrname, parent, element, clone=..., **kw): ...
    def visit_clauseelement_list(self, attrname, parent, element, clone=..., **kw): ...
    def visit_clauseelement_tuple(self, attrname, parent, element, clone=..., **kw): ...
    def visit_executable_options(self, attrname, parent, element, clone=..., **kw): ...
    def visit_clauseelement_unordered_set(self, attrname, parent, element, clone=..., **kw): ...
    def visit_clauseelement_tuples(self, attrname, parent, element, clone=..., **kw): ...
    def visit_string_clauseelement_dict(self, attrname, parent, element, clone=..., **kw): ...
    def visit_setup_join_tuple(self, attrname, parent, element, clone=..., **kw): ...
    def visit_memoized_select_entities(self, attrname, parent, element, **kw): ...
    def visit_dml_ordered_values(self, attrname, parent, element, clone=..., **kw): ...
    def visit_dml_values(self, attrname, parent, element, clone=..., **kw): ...
    def visit_dml_multi_values(self, attrname, parent, element, clone=..., **kw): ...
    def visit_propagate_attrs(self, attrname, parent, element, clone=..., **kw): ...

class _GetChildrenTraversal(HasTraversalDispatch):
    def visit_has_cache_key(self, element, **kw): ...
    def visit_clauseelement(self, element, **kw): ...
    def visit_clauseelement_list(self, element, **kw): ...
    def visit_clauseelement_tuple(self, element, **kw): ...
    def visit_clauseelement_tuples(self, element, **kw): ...
    def visit_fromclause_canonical_column_collection(self, element, **kw): ...
    def visit_string_clauseelement_dict(self, element, **kw): ...
    def visit_fromclause_ordered_set(self, element, **kw): ...
    def visit_clauseelement_unordered_set(self, element, **kw): ...
    def visit_setup_join_tuple(self, element, **kw) -> Generator[Incomplete, None, None]: ...
    def visit_memoized_select_entities(self, element, **kw): ...
    def visit_dml_ordered_values(self, element, **kw) -> Generator[Incomplete, None, None]: ...
    def visit_dml_values(self, element, **kw) -> Generator[Incomplete, None, None]: ...
    def visit_dml_multi_values(self, element, **kw): ...
    def visit_propagate_attrs(self, element, **kw): ...

class TraversalComparatorStrategy(HasTraversalDispatch, util.MemoizedSlots):
    stack: Incomplete
    cache: Incomplete
    def __init__(self) -> None: ...
    def compare(self, obj1: ExternallyTraversible, obj2: ExternallyTraversible, **kw: Any) -> bool: ...
    def compare_inner(self, obj1, obj2, **kw): ...
    def visit_has_cache_key(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_propagate_attrs(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_has_cache_key_list(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_executable_options(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_clauseelement(self, attrname, left_parent, left, right_parent, right, **kw) -> None: ...
    def visit_fromclause_canonical_column_collection(self, attrname, left_parent, left, right_parent, right, **kw) -> None: ...
    def visit_fromclause_derived_column_collection(self, attrname, left_parent, left, right_parent, right, **kw) -> None: ...
    def visit_string_clauseelement_dict(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_clauseelement_tuples(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_clauseelement_list(self, attrname, left_parent, left, right_parent, right, **kw) -> None: ...
    def visit_clauseelement_tuple(self, attrname, left_parent, left, right_parent, right, **kw) -> None: ...
    def visit_clauseelement_unordered_set(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_fromclause_ordered_set(self, attrname, left_parent, left, right_parent, right, **kw) -> None: ...
    def visit_string(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_string_list(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_string_multi_dict(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_multi(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_anon_name(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_boolean(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_operator(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_type(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_plain_dict(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_dialect_options(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_annotations_key(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_with_context_options(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_plain_obj(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_named_ddl_element(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_prefix_sequence(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_setup_join_tuple(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_memoized_select_entities(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_table_hint_list(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_statement_hint_list(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_unknown_structure(self, attrname, left_parent, left, right_parent, right, **kw) -> None: ...
    def visit_dml_ordered_values(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_dml_values(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def visit_dml_multi_values(self, attrname, left_parent, left, right_parent, right, **kw): ...
    def compare_expression_clauselist(self, left, right, **kw): ...
    def compare_clauselist(self, left, right, **kw): ...
    def compare_binary(self, left, right, **kw): ...
    def compare_bindparam(self, left, right, **kw): ...

class ColIdentityComparatorStrategy(TraversalComparatorStrategy):
    def compare_column_element(self, left, right, use_proxies: bool = ..., equivalents=..., **kw): ...
    def compare_column(self, left, right, **kw): ...
    def compare_label(self, left, right, **kw): ...
    def compare_table(self, left, right, **kw): ...
