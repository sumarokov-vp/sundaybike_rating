from .. import exc as exc, util as util
from .attr import RefCollection as RefCollection
from .base import dispatcher as dispatcher
from _typeshed import Incomplete
from typing import Any, Deque, Generic, Optional

class EventTarget:
    dispatch: dispatcher[Any]

class _EventKey(Generic[_ET]):
    target: _ET
    identifier: str
    fn: _ListenerFnType
    fn_key: _ListenerFnKeyType
    dispatch_target: Any
    fn_wrap: Incomplete
    def __init__(self, target: _ET, identifier: str, fn: _ListenerFnType, dispatch_target: Any, _fn_wrap: Optional[_ListenerFnType] = ...) -> None: ...
    def with_wrapper(self, fn_wrap: _ListenerFnType) -> _EventKey[_ET]: ...
    def with_dispatch_target(self, dispatch_target: Any) -> _EventKey[_ET]: ...
    def listen(self, *args: Any, **kw: Any) -> None: ...
    def remove(self) -> None: ...
    def contains(self) -> bool: ...
    def base_listen(self, propagate: bool = ..., insert: bool = ..., named: bool = ..., retval: Optional[bool] = ..., asyncio: bool = ...) -> None: ...
    def append_to_list(self, owner: RefCollection[_ET], list_: Deque[_ListenerFnType]) -> bool: ...
    def remove_from_list(self, owner: RefCollection[_ET], list_: Deque[_ListenerFnType]) -> None: ...
    def prepend_to_list(self, owner: RefCollection[_ET], list_: Deque[_ListenerFnType]) -> bool: ...
