from .. import event as event, util as util
from ..engine import Engine as Engine
from ..engine.interfaces import DBAPIConnection as DBAPIConnection
from .base import ConnectionPoolEntry as ConnectionPoolEntry, Pool as Pool, PoolProxiedConnection as PoolProxiedConnection, PoolResetState as PoolResetState
from typing import Optional

class PoolEvents(event.Events[Pool]):
    def connect(self, dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry) -> None: ...
    def first_connect(self, dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry) -> None: ...
    def checkout(self, dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry, connection_proxy: PoolProxiedConnection) -> None: ...
    def checkin(self, dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry) -> None: ...
    def reset(self, dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry, reset_state: PoolResetState) -> None: ...
    def invalidate(self, dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry, exception: Optional[BaseException]) -> None: ...
    def soft_invalidate(self, dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry, exception: Optional[BaseException]) -> None: ...
    def close(self, dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry) -> None: ...
    def detach(self, dbapi_connection: DBAPIConnection, connection_record: ConnectionPoolEntry) -> None: ...
    def close_detached(self, dbapi_connection: DBAPIConnection) -> None: ...
