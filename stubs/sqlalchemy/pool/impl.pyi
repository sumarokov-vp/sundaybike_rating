from .. import exc as exc, util as util
from ..engine.interfaces import DBAPIConnection as DBAPIConnection
from ..util import chop_traceback as chop_traceback
from ..util.typing import Literal as Literal
from .base import ConnectionPoolEntry as ConnectionPoolEntry, Pool as Pool, PoolProxiedConnection as PoolProxiedConnection, _ConnectionRecord, _CreatorFnType, _CreatorWRecFnType
from _typeshed import Incomplete
from typing import Any, Union

class QueuePool(Pool):
    def __init__(self, creator: Union[_CreatorFnType, _CreatorWRecFnType], pool_size: int = ..., max_overflow: int = ..., timeout: float = ..., use_lifo: bool = ..., **kw: Any) -> None: ...
    def recreate(self) -> QueuePool: ...
    def dispose(self) -> None: ...
    def status(self) -> str: ...
    def size(self) -> int: ...
    def timeout(self) -> float: ...
    def checkedin(self) -> int: ...
    def overflow(self) -> int: ...
    def checkedout(self) -> int: ...

class AsyncAdaptedQueuePool(QueuePool): ...
class FallbackAsyncAdaptedQueuePool(AsyncAdaptedQueuePool): ...

class NullPool(Pool):
    def status(self) -> str: ...
    def recreate(self) -> NullPool: ...
    def dispose(self) -> None: ...

class SingletonThreadPool(Pool):
    size: Incomplete
    def __init__(self, creator: Union[_CreatorFnType, _CreatorWRecFnType], pool_size: int = ..., **kw: Any) -> None: ...
    def recreate(self) -> SingletonThreadPool: ...
    def dispose(self) -> None: ...
    def status(self) -> str: ...
    def connect(self) -> PoolProxiedConnection: ...

class StaticPool(Pool):
    def connection(self) -> _ConnectionRecord: ...
    def status(self) -> str: ...
    def dispose(self) -> None: ...
    def recreate(self) -> StaticPool: ...

class AssertionPool(Pool):
    def __init__(self, *args: Any, **kw: Any) -> None: ...
    def status(self) -> str: ...
    def dispose(self) -> None: ...
    def recreate(self) -> AssertionPool: ...
