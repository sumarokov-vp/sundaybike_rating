from . import compat as compat
from .. import exc as exc
from .langhelpers import decorator as decorator, inject_docstring_text as inject_docstring_text, inject_param_text as inject_param_text
from typing import Any, Callable, Optional, Sequence, Tuple, Type

def warn_deprecated(msg: str, version: str, stacklevel: int = ..., code: Optional[str] = ...) -> None: ...
def warn_deprecated_limited(msg: str, args: Sequence[Any], version: str, stacklevel: int = ..., code: Optional[str] = ...) -> None: ...
def deprecated_cls(version: str, message: str, constructor: Optional[str] = ...) -> Callable[[Type[_T]], Type[_T]]: ...
def deprecated(version: str, message: Optional[str] = ..., add_deprecation_to_docstring: bool = ..., warning: Optional[Type[exc.SADeprecationWarning]] = ..., enable_warnings: bool = ...) -> Callable[[_F], _F]: ...
def moved_20(message: str, **kw: Any) -> Callable[[Callable[..., _T]], Callable[..., _T]]: ...
def became_legacy_20(api_name: str, alternative: Optional[str] = ..., **kw: Any) -> Callable[[_F], _F]: ...
def deprecated_params(**specs: Tuple[str, str]) -> Callable[[_F], _F]: ...
