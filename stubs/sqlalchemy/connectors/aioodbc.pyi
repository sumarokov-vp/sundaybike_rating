from .. import pool as pool, util as util
from ..engine.interfaces import ConnectArgsType as ConnectArgsType
from ..engine.url import URL as URL
from ..util.concurrency import await_fallback as await_fallback, await_only as await_only
from .asyncio import AsyncAdaptFallback_dbapi_connection as AsyncAdaptFallback_dbapi_connection, AsyncAdapt_dbapi_connection as AsyncAdapt_dbapi_connection, AsyncAdapt_dbapi_cursor as AsyncAdapt_dbapi_cursor, AsyncAdapt_dbapi_ss_cursor as AsyncAdapt_dbapi_ss_cursor
from .pyodbc import PyODBCConnector as PyODBCConnector
from _typeshed import Incomplete

class AsyncAdapt_aioodbc_cursor(AsyncAdapt_dbapi_cursor):
    def setinputsizes(self, *inputsizes): ...

class AsyncAdapt_aioodbc_ss_cursor(AsyncAdapt_aioodbc_cursor, AsyncAdapt_dbapi_ss_cursor): ...

class AsyncAdapt_aioodbc_connection(AsyncAdapt_dbapi_connection):
    @property
    def autocommit(self): ...
    @autocommit.setter
    def autocommit(self, value) -> None: ...
    def cursor(self, server_side: bool = ...): ...
    def rollback(self) -> None: ...
    def commit(self) -> None: ...
    def close(self) -> None: ...

class AsyncAdaptFallback_aioodbc_connection(AsyncAdaptFallback_dbapi_connection, AsyncAdapt_aioodbc_connection): ...

class AsyncAdapt_aioodbc_dbapi:
    aioodbc: Incomplete
    pyodbc: Incomplete
    paramstyle: Incomplete
    Cursor: Incomplete
    version: Incomplete
    def __init__(self, aioodbc, pyodbc) -> None: ...
    def connect(self, *arg, **kw): ...

class aiodbcConnector(PyODBCConnector):
    is_async: bool
    supports_statement_cache: bool
    supports_server_side_cursors: bool
    @classmethod
    def import_dbapi(cls): ...
    def create_connect_args(self, url: URL) -> ConnectArgsType: ...
    @classmethod
    def get_pool_class(cls, url): ...
    def set_readonly(self, connection, value) -> None: ...
    def set_deferrable(self, connection, value) -> None: ...
    def get_driver_connection(self, connection): ...
