from .util import py311 as py311, py38 as py38
from .util.typing import Literal as Literal
from _typeshed import Incomplete
from typing import Any, Optional, Type, overload

STACKLEVEL: bool
STACKLEVEL_OFFSET: Incomplete
rootlogger: Incomplete

def class_logger(cls) -> Type[_IT]: ...

class Identified:
    logging_name: Optional[str]
    logger: _IdentifiedLoggerType

class InstanceLogger:
    echo: Incomplete
    logger: Incomplete
    def __init__(self, echo: _EchoFlagType, name: str) -> None: ...
    def debug(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def info(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def warning(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    warn = warning
    def error(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def exception(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def critical(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def log(self, level: int, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def isEnabledFor(self, level: int) -> bool: ...
    def getEffectiveLevel(self) -> int: ...

def instance_logger(instance: Identified, echoflag: _EchoFlagType = ...) -> None: ...

class echo_property:
    __doc__: str
    @overload
    def __get__(self, instance: Literal[None], owner: Type[Identified]) -> echo_property: ...
    @overload
    def __get__(self, instance: Identified, owner: Type[Identified]) -> _EchoFlagType: ...
    def __set__(self, instance: Identified, value: _EchoFlagType) -> None: ...
