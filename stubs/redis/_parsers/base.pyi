from ..exceptions import AuthenticationError as AuthenticationError, AuthenticationWrongNumberOfArgsError as AuthenticationWrongNumberOfArgsError, BusyLoadingError as BusyLoadingError, ConnectionError as ConnectionError, ExecAbortError as ExecAbortError, ModuleError as ModuleError, NoPermissionError as NoPermissionError, NoScriptError as NoScriptError, OutOfMemoryError as OutOfMemoryError, ReadOnlyError as ReadOnlyError, RedisError as RedisError, ResponseError as ResponseError
from ..typing import EncodableT as EncodableT
from .encoders import Encoder as Encoder
from .socket import SERVER_CLOSED_CONNECTION_ERROR as SERVER_CLOSED_CONNECTION_ERROR, SocketBuffer as SocketBuffer
from _typeshed import Incomplete
from abc import ABC
from typing import List, Union

MODULE_LOAD_ERROR: str
NO_SUCH_MODULE_ERROR: str
MODULE_UNLOAD_NOT_POSSIBLE_ERROR: str
MODULE_EXPORTS_DATA_TYPES_ERROR: str
NO_AUTH_SET_ERROR: Incomplete

class BaseParser(ABC):
    EXCEPTION_CLASSES: Incomplete
    @classmethod
    def parse_error(cls, response): ...
    def on_disconnect(self) -> None: ...
    def on_connect(self, connection) -> None: ...

class _RESPBase(BaseParser):
    socket_read_size: Incomplete
    encoder: Incomplete
    def __init__(self, socket_read_size) -> None: ...
    def __del__(self) -> None: ...
    def on_connect(self, connection) -> None: ...
    def on_disconnect(self) -> None: ...
    def can_read(self, timeout): ...

class AsyncBaseParser(BaseParser):
    def __init__(self, socket_read_size: int) -> None: ...
    async def can_read_destructive(self) -> bool: ...
    async def read_response(self, disable_decoding: bool = ...) -> Union[EncodableT, ResponseError, None, List[EncodableT]]: ...

class _AsyncRESPBase(AsyncBaseParser):
    encoder: Incomplete
    def __init__(self, socket_read_size: int) -> None: ...
    def on_connect(self, connection) -> None: ...
    def on_disconnect(self) -> None: ...
    async def can_read_destructive(self) -> bool: ...
