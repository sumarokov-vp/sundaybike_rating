from _typeshed import Incomplete
from redis.asyncio.cluster import ClusterNode as ClusterNode
from redis.exceptions import RedisError as RedisError, ResponseError as ResponseError
from redis.utils import str_if_bytes as str_if_bytes
from typing import Any, Optional, Tuple

class AbstractCommandsParser:
    def parse_subcommand(self, command, **options): ...

class CommandsParser(AbstractCommandsParser):
    commands: Incomplete
    def __init__(self, redis_connection) -> None: ...
    def initialize(self, r) -> None: ...
    def get_keys(self, redis_conn, *args): ...

class AsyncCommandsParser(AbstractCommandsParser):
    commands: Incomplete
    def __init__(self) -> None: ...
    node: Incomplete
    async def initialize(self, node: Optional['ClusterNode'] = ...) -> None: ...
    async def get_keys(self, *args: Any) -> Optional[Tuple[str, ...]]: ...
