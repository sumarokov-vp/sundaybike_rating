import redis
from ...asyncio.client import Pipeline as AsyncioPipeline
from .commands import AGGREGATE_CMD as AGGREGATE_CMD, AsyncSearchCommands as AsyncSearchCommands, CONFIG_CMD as CONFIG_CMD, INFO_CMD as INFO_CMD, PROFILE_CMD as PROFILE_CMD, SEARCH_CMD as SEARCH_CMD, SPELLCHECK_CMD as SPELLCHECK_CMD, SYNDUMP_CMD as SYNDUMP_CMD, SearchCommands as SearchCommands
from _typeshed import Incomplete

class Search(SearchCommands):
    class BatchIndexer:
        client: Incomplete
        execute_command: Incomplete
        total: int
        chunk_size: Incomplete
        current_chunk: int
        def __init__(self, client, chunk_size: int = ...) -> None: ...
        def __del__(self) -> None: ...
        def add_document(self, doc_id, nosave: bool = ..., score: float = ..., payload: Incomplete | None = ..., replace: bool = ..., partial: bool = ..., no_create: bool = ..., **fields) -> None: ...
        def add_document_hash(self, doc_id, score: float = ..., replace: bool = ...) -> None: ...
        def commit(self) -> None: ...
    client: Incomplete
    index_name: Incomplete
    execute_command: Incomplete
    def __init__(self, client, index_name: str = ...) -> None: ...
    def pipeline(self, transaction: bool = ..., shard_hint: Incomplete | None = ...): ...

class AsyncSearch(Search, AsyncSearchCommands):
    class BatchIndexer(Search.BatchIndexer):
        async def add_document(self, doc_id, nosave: bool = ..., score: float = ..., payload: Incomplete | None = ..., replace: bool = ..., partial: bool = ..., no_create: bool = ..., **fields) -> None: ...
        current_chunk: int
        async def commit(self) -> None: ...
    def pipeline(self, transaction: bool = ..., shard_hint: Incomplete | None = ...): ...

class Pipeline(SearchCommands, redis.client.Pipeline): ...
class AsyncPipeline(AsyncSearchCommands, AsyncioPipeline, Pipeline): ...
