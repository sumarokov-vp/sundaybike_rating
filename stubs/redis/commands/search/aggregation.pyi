from _typeshed import Incomplete
from typing import List, Union

FIELDNAME: Incomplete

class Limit:
    offset: Incomplete
    count: Incomplete
    def __init__(self, offset: int = ..., count: int = ...) -> None: ...
    def build_args(self): ...

class Reducer:
    NAME: Incomplete
    def __init__(self, *args: List[str]) -> None: ...
    def alias(self, alias: str) -> Reducer: ...
    @property
    def args(self) -> List[str]: ...

class SortDirection:
    DIRSTRING: Incomplete
    field: Incomplete
    def __init__(self, field: str) -> None: ...

class Asc(SortDirection):
    DIRSTRING: str

class Desc(SortDirection):
    DIRSTRING: str

class AggregateRequest:
    def __init__(self, query: str = ...) -> None: ...
    def load(self, *fields: List[str]) -> AggregateRequest: ...
    def group_by(self, fields: List[str], *reducers: Union[Reducer, List[Reducer]]) -> AggregateRequest: ...
    def apply(self, **kwexpr) -> AggregateRequest: ...
    def limit(self, offset: int, num: int) -> AggregateRequest: ...
    def sort_by(self, *fields: List[str], **kwargs) -> AggregateRequest: ...
    def filter(self, expressions: Union[str, List[str]]) -> AggregateRequest: ...
    def with_schema(self) -> AggregateRequest: ...
    def verbatim(self) -> AggregateRequest: ...
    def cursor(self, count: int = ..., max_idle: float = ...) -> AggregateRequest: ...
    def build_args(self) -> List[str]: ...
    def dialect(self, dialect: int) -> AggregateRequest: ...

class Cursor:
    cid: Incomplete
    max_idle: int
    count: int
    def __init__(self, cid: int) -> None: ...
    def build_args(self): ...

class AggregateResult:
    rows: Incomplete
    cursor: Incomplete
    schema: Incomplete
    def __init__(self, rows, cursor: Cursor, schema) -> None: ...
