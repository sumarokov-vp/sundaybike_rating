from _typeshed import Incomplete
from typing import List, Optional, Union

class Query:
    def __init__(self, query_string: str) -> None: ...
    def query_string(self) -> str: ...
    def limit_ids(self, *ids) -> Query: ...
    def return_fields(self, *fields) -> Query: ...
    def return_field(self, field: str, as_field: Optional[str] = ...) -> Query: ...
    def summarize(self, fields: Optional[List] = ..., context_len: Optional[int] = ..., num_frags: Optional[int] = ..., sep: Optional[str] = ...) -> Query: ...
    def highlight(self, fields: Optional[List[str]] = ..., tags: Optional[List[str]] = ...) -> None: ...
    def language(self, language: str) -> Query: ...
    def slop(self, slop: int) -> Query: ...
    def timeout(self, timeout: float) -> Query: ...
    def in_order(self) -> Query: ...
    def scorer(self, scorer: str) -> Query: ...
    def get_args(self) -> List[str]: ...
    def paging(self, offset: int, num: int) -> Query: ...
    def verbatim(self) -> Query: ...
    def no_content(self) -> Query: ...
    def no_stopwords(self) -> Query: ...
    def with_payloads(self) -> Query: ...
    def with_scores(self) -> Query: ...
    def limit_fields(self, *fields: List[str]) -> Query: ...
    def add_filter(self, flt: Filter) -> Query: ...
    def sort_by(self, field: str, asc: bool = ...) -> Query: ...
    def expander(self, expander: str) -> Query: ...
    def dialect(self, dialect: int) -> Query: ...

class Filter:
    args: Incomplete
    def __init__(self, keyword: str, field: str, *args: List[str]) -> None: ...

class NumericFilter(Filter):
    INF: str
    NEG_INF: str
    def __init__(self, field: str, minval: Union[int, str], maxval: Union[int, str], minExclusive: bool = ..., maxExclusive: bool = ...) -> None: ...

class GeoFilter(Filter):
    METERS: str
    KILOMETERS: str
    FEET: str
    MILES: str
    def __init__(self, field: str, lon: float, lat: float, radius: float, unit: str = ...) -> None: ...

class SortbyField:
    args: Incomplete
    def __init__(self, field: str, asc: bool = ...) -> None: ...
