from ..helpers import get_protocol_version as get_protocol_version, parse_to_dict as parse_to_dict
from ._util import to_string as to_string
from .aggregation import AggregateRequest as AggregateRequest, AggregateResult as AggregateResult, Cursor as Cursor
from .document import Document as Document
from .query import Query as Query
from .result import Result as Result
from .suggestion import SuggestionParser as SuggestionParser
from _typeshed import Incomplete
from redis.client import Pipeline as Pipeline
from redis.utils import deprecated_function as deprecated_function
from typing import Dict, List, Optional, Union

NUMERIC: str
CREATE_CMD: str
ALTER_CMD: str
SEARCH_CMD: str
ADD_CMD: str
ADDHASH_CMD: str
DROP_CMD: str
DROPINDEX_CMD: str
EXPLAIN_CMD: str
EXPLAINCLI_CMD: str
DEL_CMD: str
AGGREGATE_CMD: str
PROFILE_CMD: str
CURSOR_CMD: str
SPELLCHECK_CMD: str
DICT_ADD_CMD: str
DICT_DEL_CMD: str
DICT_DUMP_CMD: str
GET_CMD: str
MGET_CMD: str
CONFIG_CMD: str
TAGVALS_CMD: str
ALIAS_ADD_CMD: str
ALIAS_UPDATE_CMD: str
ALIAS_DEL_CMD: str
INFO_CMD: str
SUGADD_COMMAND: str
SUGDEL_COMMAND: str
SUGLEN_COMMAND: str
SUGGET_COMMAND: str
SYNUPDATE_CMD: str
SYNDUMP_CMD: str
NOOFFSETS: str
NOFIELDS: str
NOHL: str
NOFREQS: str
MAXTEXTFIELDS: str
TEMPORARY: str
STOPWORDS: str
SKIPINITIALSCAN: str
WITHSCORES: str
FUZZY: str
WITHPAYLOADS: str

class SearchCommands:
    def batch_indexer(self, chunk_size: int = ...): ...
    def create_index(self, fields, no_term_offsets: bool = ..., no_field_flags: bool = ..., stopwords: Incomplete | None = ..., definition: Incomplete | None = ..., max_text_fields: bool = ..., temporary: Incomplete | None = ..., no_highlight: bool = ..., no_term_frequencies: bool = ..., skip_initial_scan: bool = ...): ...
    def alter_schema_add(self, fields: List[str]): ...
    def dropindex(self, delete_documents: bool = ...): ...
    def add_document(self, doc_id: str, nosave: bool = ..., score: float = ..., payload: bool = ..., replace: bool = ..., partial: bool = ..., language: Optional[str] = ..., no_create: str = ..., **fields: List[str]): ...
    def add_document_hash(self, doc_id, score: float = ..., language: Incomplete | None = ..., replace: bool = ...): ...
    def delete_document(self, doc_id, conn: Incomplete | None = ..., delete_actual_document: bool = ...): ...
    def load_document(self, id): ...
    def get(self, *ids): ...
    def info(self): ...
    def get_params_args(self, query_params: Union[Dict[str, Union[str, int, float, bytes]], None]): ...
    def search(self, query: Union[str, Query], query_params: Union[Dict[str, Union[str, int, float, bytes]], None] = ...): ...
    def explain(self, query: Union[str, Query], query_params: Dict[str, Union[str, int, float]] = ...): ...
    def explain_cli(self, query: Union[str, Query]): ...
    def aggregate(self, query: Union[str, Query], query_params: Dict[str, Union[str, int, float]] = ...): ...
    def profile(self, query: Union[str, Query, AggregateRequest], limited: bool = ..., query_params: Optional[Dict[str, Union[str, int, float]]] = ...): ...
    def spellcheck(self, query, distance: Incomplete | None = ..., include: Incomplete | None = ..., exclude: Incomplete | None = ...): ...
    def dict_add(self, name: str, *terms: List[str]): ...
    def dict_del(self, name: str, *terms: List[str]): ...
    def dict_dump(self, name: str): ...
    def config_set(self, option: str, value: str) -> bool: ...
    def config_get(self, option: str) -> str: ...
    def tagvals(self, tagfield: str): ...
    def aliasadd(self, alias: str): ...
    def aliasupdate(self, alias: str): ...
    def aliasdel(self, alias: str): ...
    def sugadd(self, key, *suggestions, **kwargs): ...
    def suglen(self, key: str) -> int: ...
    def sugdel(self, key: str, string: str) -> int: ...
    def sugget(self, key: str, prefix: str, fuzzy: bool = ..., num: int = ..., with_scores: bool = ..., with_payloads: bool = ...) -> List[SuggestionParser]: ...
    def synupdate(self, groupid: str, skipinitial: bool = ..., *terms: List[str]): ...
    def syndump(self): ...

class AsyncSearchCommands(SearchCommands):
    async def info(self): ...
    async def search(self, query: Union[str, Query], query_params: Dict[str, Union[str, int, float]] = ...): ...
    async def aggregate(self, query: Union[str, Query], query_params: Dict[str, Union[str, int, float]] = ...): ...
    async def spellcheck(self, query, distance: Incomplete | None = ..., include: Incomplete | None = ..., exclude: Incomplete | None = ...): ...
    async def config_set(self, option: str, value: str) -> bool: ...
    async def config_get(self, option: str) -> str: ...
    async def load_document(self, id): ...
    async def sugadd(self, key, *suggestions, **kwargs): ...
    async def sugget(self, key: str, prefix: str, fuzzy: bool = ..., num: int = ..., with_scores: bool = ..., with_payloads: bool = ...) -> List[SuggestionParser]: ...
