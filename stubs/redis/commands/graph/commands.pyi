from .exceptions import VersionMismatchException as VersionMismatchException
from .execution_plan import ExecutionPlan as ExecutionPlan
from .query_result import AsyncQueryResult as AsyncQueryResult, QueryResult as QueryResult
from _typeshed import Incomplete
from redis import DataError as DataError
from redis.exceptions import ResponseError as ResponseError

PROFILE_CMD: str
RO_QUERY_CMD: str
QUERY_CMD: str
DELETE_CMD: str
SLOWLOG_CMD: str
CONFIG_CMD: str
LIST_CMD: str
EXPLAIN_CMD: str

class GraphCommands:
    def commit(self): ...
    version: Incomplete
    def query(self, q, params: Incomplete | None = ..., timeout: Incomplete | None = ..., read_only: bool = ..., profile: bool = ...): ...
    def merge(self, pattern): ...
    def delete(self): ...
    nodes: Incomplete
    edges: Incomplete
    def flush(self) -> None: ...
    def bulk(self, **kwargs) -> None: ...
    def profile(self, query): ...
    def slowlog(self): ...
    def config(self, name, value: Incomplete | None = ..., set: bool = ...): ...
    def list_keys(self): ...
    def execution_plan(self, query, params: Incomplete | None = ...): ...
    def explain(self, query, params: Incomplete | None = ...): ...

class AsyncGraphCommands(GraphCommands):
    version: Incomplete
    async def query(self, q, params: Incomplete | None = ..., timeout: Incomplete | None = ..., read_only: bool = ..., profile: bool = ...): ...
    async def execution_plan(self, query, params: Incomplete | None = ...): ...
    async def explain(self, query, params: Incomplete | None = ...): ...
    nodes: Incomplete
    edges: Incomplete
    async def flush(self) -> None: ...
