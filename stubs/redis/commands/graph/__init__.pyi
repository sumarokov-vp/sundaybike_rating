from ..helpers import quote_string as quote_string, random_string as random_string, stringify_param_value as stringify_param_value
from .commands import AsyncGraphCommands as AsyncGraphCommands, GraphCommands as GraphCommands
from .edge import Edge as Edge
from .node import Node as Node
from .path import Path as Path
from _typeshed import Incomplete

DB_LABELS: str
DB_RAELATIONSHIPTYPES: str
DB_PROPERTYKEYS: str

class Graph(GraphCommands):
    NAME: Incomplete
    client: Incomplete
    execute_command: Incomplete
    nodes: Incomplete
    edges: Incomplete
    version: int
    def __init__(self, client, name=...) -> None: ...
    @property
    def name(self): ...
    def get_label(self, idx): ...
    def get_relation(self, idx): ...
    def get_property(self, idx): ...
    def add_node(self, node) -> None: ...
    def add_edge(self, edge) -> None: ...
    def call_procedure(self, procedure, *args, read_only: bool = ..., **kwagrs): ...
    def labels(self): ...
    def relationship_types(self): ...
    def property_keys(self): ...

class AsyncGraph(Graph, AsyncGraphCommands):
    async def get_label(self, idx): ...
    async def get_property(self, idx): ...
    async def get_relation(self, idx): ...
    async def call_procedure(self, procedure, *args, read_only: bool = ..., **kwagrs): ...
    async def labels(self): ...
    async def property_keys(self): ...
    async def relationship_types(self): ...
