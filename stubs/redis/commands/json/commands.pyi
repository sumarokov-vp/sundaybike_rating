from ._util import JsonType as JsonType
from .decoders import decode_dict_keys as decode_dict_keys
from .path import Path as Path
from redis.exceptions import DataError as DataError
from redis.utils import deprecated_function as deprecated_function
from typing import Dict, List, Optional, Tuple, Union

class JSONCommands:
    def arrappend(self, name: str, path: Optional[str] = ..., *args: List[JsonType]) -> List[Union[int, None]]: ...
    def arrindex(self, name: str, path: str, scalar: int, start: Optional[int] = ..., stop: Optional[int] = ...) -> List[Union[int, None]]: ...
    def arrinsert(self, name: str, path: str, index: int, *args: List[JsonType]) -> List[Union[int, None]]: ...
    def arrlen(self, name: str, path: Optional[str] = ...) -> List[Union[int, None]]: ...
    def arrpop(self, name: str, path: Optional[str] = ..., index: Optional[int] = ...) -> List[Union[str, None]]: ...
    def arrtrim(self, name: str, path: str, start: int, stop: int) -> List[Union[int, None]]: ...
    def type(self, name: str, path: Optional[str] = ...) -> List[str]: ...
    def resp(self, name: str, path: Optional[str] = ...) -> List: ...
    def objkeys(self, name: str, path: Optional[str] = ...) -> List[Union[List[str], None]]: ...
    def objlen(self, name: str, path: Optional[str] = ...) -> int: ...
    def numincrby(self, name: str, path: str, number: int) -> str: ...
    def nummultby(self, name: str, path: str, number: int) -> str: ...
    def clear(self, name: str, path: Optional[str] = ...) -> int: ...
    def delete(self, key: str, path: Optional[str] = ...) -> int: ...
    forget = delete
    def get(self, name: str, *args, no_escape: Optional[bool] = ...) -> List[JsonType]: ...
    def mget(self, keys: List[str], path: str) -> List[JsonType]: ...
    def set(self, name: str, path: str, obj: JsonType, nx: Optional[bool] = ..., xx: Optional[bool] = ..., decode_keys: Optional[bool] = ...) -> Optional[str]: ...
    def mset(self, triplets: List[Tuple[str, str, JsonType]]) -> Optional[str]: ...
    def merge(self, name: str, path: str, obj: JsonType, decode_keys: Optional[bool] = ...) -> Optional[str]: ...
    def set_file(self, name: str, path: str, file_name: str, nx: Optional[bool] = ..., xx: Optional[bool] = ..., decode_keys: Optional[bool] = ...) -> Optional[str]: ...
    def set_path(self, json_path: str, root_folder: str, nx: Optional[bool] = ..., xx: Optional[bool] = ..., decode_keys: Optional[bool] = ...) -> List[Dict[str, bool]]: ...
    def strlen(self, name: str, path: Optional[str] = ...) -> List[Union[int, None]]: ...
    def toggle(self, name: str, path: Optional[str] = ...) -> Union[bool, List[Optional[int]]]: ...
    def strappend(self, name: str, value: str, path: Optional[int] = ...) -> Union[int, List[Optional[int]]]: ...
    def debug(self, subcommand: str, key: Optional[str] = ..., path: Optional[str] = ...) -> Union[int, List[str]]: ...
    def jsonget(self, *args, **kwargs): ...
    def jsonmget(self, *args, **kwargs): ...
    def jsonset(self, *args, **kwargs): ...
